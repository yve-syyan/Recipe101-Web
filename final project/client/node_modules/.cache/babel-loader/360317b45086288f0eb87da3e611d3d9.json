{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lepan\\\\Desktop\\\\CIS550-Project\\\\final project\\\\client\\\\src\\\\components\\\\IngredientOption.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react'; // import Chip from '@material-ui/core/Chip';\n\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nconst filter = createFilterOptions();\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 500,\n    '& > * + *': {\n      marginTop: theme.spacing(3)\n    }\n  }\n}));\nexport default function IngredientOption() {\n  _s();\n\n  const classes = useStyles();\n  const [setValue, value] = React.useState(null);\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    value: value,\n    onChange: (event, newValue) => {\n      if (typeof newValue === 'string') {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        // Create a new value from the user input\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params); // Suggest the creation of a new value\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue,\n          title: `Add \"${params.inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    id: \"free-solo-with-text-demo\",\n    options: top100Films,\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      } // Add \"xxx\" option created dynamically\n\n\n      if (option.inputValue) {\n        return option.inputValue;\n      } // Regular option\n\n\n      return option.title;\n    },\n    renderOption: option => option.title,\n    style: {\n      width: 300\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Free solo with text demo\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete // value={value}\n  , {\n    multiple: true,\n    limitTags: 10,\n    id: \"tags-outlined\",\n    onChange: (event, newValue) => {\n      if (typeof newValue === 'string') {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        // Create a new value from the user input\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params); // Suggest the creation of a new value\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue,\n          title: `Add \"${params.inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      } // Add \"xxx\" option created dynamically\n\n\n      if (option.inputValue) {\n        return option.inputValue;\n      } // Regular option\n\n\n      return option.title;\n    },\n    Options: top100Films,\n    defaultValue: [top100Films[13]],\n    filterSelectedOptions: true,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"filterSelectedOptions\",\n      placeholder: \"Favorites\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\n_s(IngredientOption, \"1YfBVh3piS9iIQDY8bJ5jWIDjZ0=\", false, function () {\n  return [useStyles];\n});\n\n_c = IngredientOption;\nconst top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: 'Pulp Fiction',\n  year: 1994\n}, {\n  title: 'The Lord of the Rings: The Return of the King',\n  year: 2003\n}, {\n  title: 'The Good, the Bad and the Ugly',\n  year: 1966\n}, {\n  title: 'Fight Club',\n  year: 1999\n}, {\n  title: 'The Lord of the Rings: The Fellowship of the Ring',\n  year: 2001\n}, {\n  title: 'Star Wars: Episode V - The Empire Strikes Back',\n  year: 1980\n}, {\n  title: 'Forrest Gump',\n  year: 1994\n}, {\n  title: 'Inception',\n  year: 2010\n}, {\n  title: 'The Lord of the Rings: The Two Towers',\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: 'Goodfellas',\n  year: 1990\n}, {\n  title: 'The Matrix',\n  year: 1999\n}, {\n  title: 'Seven Samurai',\n  year: 1954\n}, {\n  title: 'Star Wars: Episode IV - A New Hope',\n  year: 1977\n}, {\n  title: 'City of God',\n  year: 2002\n}, {\n  title: 'Se7en',\n  year: 1995\n}, {\n  title: 'The Silence of the Lambs',\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: 'Life Is Beautiful',\n  year: 1997\n}, {\n  title: 'The Usual Suspects',\n  year: 1995\n}, {\n  title: 'Léon: The Professional',\n  year: 1994\n}, {\n  title: 'Spirited Away',\n  year: 2001\n}, {\n  title: 'Saving Private Ryan',\n  year: 1998\n}, {\n  title: 'Once Upon a Time in the West',\n  year: 1968\n}, {\n  title: 'American History X',\n  year: 1998\n}, {\n  title: 'Interstellar',\n  year: 2014\n}, {\n  title: 'Casablanca',\n  year: 1942\n}, {\n  title: 'City Lights',\n  year: 1931\n}, {\n  title: 'Psycho',\n  year: 1960\n}, {\n  title: 'The Green Mile',\n  year: 1999\n}, {\n  title: 'The Intouchables',\n  year: 2011\n}, {\n  title: 'Modern Times',\n  year: 1936\n}, {\n  title: 'Raiders of the Lost Ark',\n  year: 1981\n}, {\n  title: 'Rear Window',\n  year: 1954\n}, {\n  title: 'The Pianist',\n  year: 2002\n}, {\n  title: 'The Departed',\n  year: 2006\n}, {\n  title: 'Terminator 2: Judgment Day',\n  year: 1991\n}, {\n  title: 'Back to the Future',\n  year: 1985\n}, {\n  title: 'Whiplash',\n  year: 2014\n}, {\n  title: 'Gladiator',\n  year: 2000\n}, {\n  title: 'Memento',\n  year: 2000\n}, {\n  title: 'The Prestige',\n  year: 2006\n}, {\n  title: 'The Lion King',\n  year: 1994\n}, {\n  title: 'Apocalypse Now',\n  year: 1979\n}, {\n  title: 'Alien',\n  year: 1979\n}, {\n  title: 'Sunset Boulevard',\n  year: 1950\n}, {\n  title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  year: 1964\n}, {\n  title: 'The Great Dictator',\n  year: 1940\n}, {\n  title: 'Cinema Paradiso',\n  year: 1988\n}, {\n  title: 'The Lives of Others',\n  year: 2006\n}, {\n  title: 'Grave of the Fireflies',\n  year: 1988\n}, {\n  title: 'Paths of Glory',\n  year: 1957\n}, {\n  title: 'Django Unchained',\n  year: 2012\n}, {\n  title: 'The Shining',\n  year: 1980\n}, {\n  title: 'WALL·E',\n  year: 2008\n}, {\n  title: 'American Beauty',\n  year: 1999\n}, {\n  title: 'The Dark Knight Rises',\n  year: 2012\n}, {\n  title: 'Princess Mononoke',\n  year: 1997\n}, {\n  title: 'Aliens',\n  year: 1986\n}, {\n  title: 'Oldboy',\n  year: 2003\n}, {\n  title: 'Once Upon a Time in America',\n  year: 1984\n}, {\n  title: 'Witness for the Prosecution',\n  year: 1957\n}, {\n  title: 'Das Boot',\n  year: 1981\n}, {\n  title: 'Citizen Kane',\n  year: 1941\n}, {\n  title: 'North by Northwest',\n  year: 1959\n}, {\n  title: 'Vertigo',\n  year: 1958\n}, {\n  title: 'Star Wars: Episode VI - Return of the Jedi',\n  year: 1983\n}, {\n  title: 'Reservoir Dogs',\n  year: 1992\n}, {\n  title: 'Braveheart',\n  year: 1995\n}, {\n  title: 'M',\n  year: 1931\n}, {\n  title: 'Requiem for a Dream',\n  year: 2000\n}, {\n  title: 'Amélie',\n  year: 2001\n}, {\n  title: 'A Clockwork Orange',\n  year: 1971\n}, {\n  title: 'Like Stars on Earth',\n  year: 2007\n}, {\n  title: 'Taxi Driver',\n  year: 1976\n}, {\n  title: 'Lawrence of Arabia',\n  year: 1962\n}, {\n  title: 'Double Indemnity',\n  year: 1944\n}, {\n  title: 'Eternal Sunshine of the Spotless Mind',\n  year: 2004\n}, {\n  title: 'Amadeus',\n  year: 1984\n}, {\n  title: 'To Kill a Mockingbird',\n  year: 1962\n}, {\n  title: 'Toy Story 3',\n  year: 2010\n}, {\n  title: 'Logan',\n  year: 2017\n}, {\n  title: 'Full Metal Jacket',\n  year: 1987\n}, {\n  title: 'Dangal',\n  year: 2016\n}, {\n  title: 'The Sting',\n  year: 1973\n}, {\n  title: '2001: A Space Odyssey',\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: 'Toy Story',\n  year: 1995\n}, {\n  title: 'Bicycle Thieves',\n  year: 1948\n}, {\n  title: 'The Kid',\n  year: 1921\n}, {\n  title: 'Inglourious Basterds',\n  year: 2009\n}, {\n  title: 'Snatch',\n  year: 2000\n}, {\n  title: '3 Idiots',\n  year: 2009\n}, {\n  title: 'Monty Python and the Holy Grail',\n  year: 1975\n}];\nexport { IngredientOption };\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientOption\");","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/src/components/IngredientOption.js"],"names":["React","Autocomplete","createFilterOptions","makeStyles","TextField","filter","useStyles","theme","root","width","marginTop","spacing","IngredientOption","classes","setValue","value","useState","event","newValue","title","inputValue","options","params","filtered","push","top100Films","option","year"],"mappings":"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","sourcesContent":["\r\n/* eslint-disable no-use-before-define */\r\n/* eslint-disable react/jsx-props-no-spreading */\r\nimport React from 'react';\r\n// import Chip from '@material-ui/core/Chip';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst filter = createFilterOptions();\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 500,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function IngredientOption() {\r\n  const classes = useStyles();\r\n  const [setValue,value] = React.useState(null);\r\n\r\n  return (\r\n    <Autocomplete\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n          setValue({\r\n            title: newValue,\r\n          });\r\n        } else if (newValue && newValue.inputValue) {\r\n          // Create a new value from the user input\r\n          setValue({\r\n            title: newValue.inputValue,\r\n          });\r\n        } else {\r\n          setValue(newValue);\r\n        }\r\n      }}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n\r\n        // Suggest the creation of a new value\r\n        if (params.inputValue !== '') {\r\n          filtered.push({\r\n            inputValue: params.inputValue,\r\n            title: `Add \"${params.inputValue}\"`,\r\n          });\r\n        }\r\n\r\n        return filtered;\r\n      }}\r\n      selectOnFocus\r\n      clearOnBlur\r\n      handleHomeEndKeys\r\n      id=\"free-solo-with-text-demo\"\r\n      options={top100Films}\r\n      getOptionLabel={(option) => {\r\n        // Value selected with enter, right from the input\r\n        if (typeof option === 'string') {\r\n          return option;\r\n        }\r\n        // Add \"xxx\" option created dynamically\r\n        if (option.inputValue) {\r\n          return option.inputValue;\r\n        }\r\n        // Regular option\r\n        return option.title;\r\n      }}\r\n      renderOption={(option) => option.title}\r\n      style={{ width: 300 }}\r\n      freeSolo\r\n      renderInput={(params) => (\r\n        <TextField {...params} label=\"Free solo with text demo\" variant=\"outlined\" />\r\n      )}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Autocomplete\r\n        // value={value}\r\n        multiple\r\n        limitTags={10}\r\n        id=\"tags-outlined\"\r\n        onChange={(event, newValue) => {\r\n          if (typeof newValue === 'string') {\r\n            setValue({\r\n              title: newValue,\r\n            });\r\n          } else if (newValue && newValue.inputValue) {\r\n            // Create a new value from the user input\r\n            setValue({\r\n              title: newValue.inputValue,\r\n            });\r\n          } else {\r\n            setValue(newValue);\r\n          }\r\n        }}\r\n        filterOptions={(options, params) => {\r\n          const filtered = filter(options, params);\r\n  \r\n          // Suggest the creation of a new value\r\n          if (params.inputValue !== '') {\r\n            filtered.push({\r\n              inputValue: params.inputValue,\r\n              title: `Add \"${params.inputValue}\"`,\r\n            });\r\n          }\r\n  \r\n          return filtered;\r\n        }}\r\n        getOptionLabel={(option) => {\r\n          // Value selected with enter, right from the input\r\n          if (typeof option === 'string') {\r\n            return option;\r\n          }\r\n          // Add \"xxx\" option created dynamically\r\n          if (option.inputValue) {\r\n            return option.inputValue;\r\n          }\r\n          // Regular option\r\n          return option.title;\r\n        }}\r\n        Options={top100Films}\r\n        defaultValue={[top100Films[13]]}\r\n        filterSelectedOptions\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            variant=\"outlined\"\r\n            label=\"filterSelectedOptions\"\r\n            placeholder=\"Favorites\"\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  { title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb', year: 1964 },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n\r\nexport {IngredientOption};\r\n\r\n"]},"metadata":{},"sourceType":"module"}