{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lepan\\\\Desktop\\\\CIS550-Project\\\\final project\\\\client\\\\src\\\\components\\\\IngredientOption.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable react/jsx-props-no-spreading */\n\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n\n/* eslint-disable no-unused-vars */\nimport React, { useState, Promise } from 'react'; // import PropTypes from 'prop-types';\n\nimport Chip from '@material-ui/core/Chip';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'; // import { withStyles } from '@material-ui/core/styles';\n// import { getTag } from \"./tagFunction\";\n// import { array } from 'prop-types';\n\nimport PropTypes from 'prop-types';\nimport { fetchIngredient } from \"./getData\";\nimport \"../style/IngredientOption.css\"; // import Chip from '@material-ui/core/Chip';\n\nconst useStyles = makeStyles(theme => ({\n  noOptions: {\n    background: \"#9E4244\",\n    fontFamily: \"Patua One\",\n    color: \"white\"\n  },\n  input: {\n    fontFamily: \"Patua One\",\n    color: \"white\" // botderBottom:0\n\n  },\n  outlineRoot: {\n    // '.MuiListItemText-multiline': {\n    //   borderColor:\"red\"\n    // },\n    // \"& .MuiOutlinedInput-root .MuiInputBase-input\": {\n    //    borderBottom: 0,\n    //    outline: 0\n    // },\n    // // .MuiAutocomplete-inputFocused\n    // \"& .MuiOutlinedInput-root .Mui-focused\": {\n    //    borderBottom: 0\n    // },\n    \"& .makeStyles.root\": {\n      width: 0,\n      height: 0\n    },\n    \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#E4C2C1\",\n      border: '5px solid'\n    },\n    \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#B6666F\",\n      border: '5px solid'\n    },\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#9E4244\",\n      border: '5px solid'\n    },\n    \"& .MuiOutlinedInput-input\": {\n      color: \"white\" // borderBottom: 0\n\n    },\n    \"&:hover .MuiOutlinedInput-input\": {\n      color: \"#B6666F\"\n    },\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-input\": {\n      color: \"white\"\n    },\n    \"& .MuiInputLabel-outlined\": {\n      color: \"#E4C2C1\",\n      fontFamily: \"Patua One\",\n      fontSize: 17\n    },\n    \"&:hover .MuiInputLabel-outlined\": {\n      color: \"#B6666F\",\n      fontFamily: \"Patua One\",\n      fontSize: 17\n    },\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\n      color: \"white\",\n      fontFamily: \"Patua One\",\n      fontSize: 17\n    }\n  }\n})); // const filter = createFilterOptions();\n// values.forEach((value) => {\n//   const theValue = value;\n//   theValue.pic = fetchIngredient(value.title);\n// }); \n\nconst filter = createFilterOptions(); // const styles = theme => ({\n//   root: {\n//     background: '#8F0005',\n//     border: 2,\n//     borderRadius: 3,\n//     color: 'white',\n//     height: 50,\n//     with: 100\n//   },\n// });\n// class IngredientOption extends React.Component\n\nconst IngredientOption = props => {\n  _s();\n\n  const [tags, setTags] = useState([]);\n  const classes = useStyles(); // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     tags: []\n  //   };\n  //   this.onTagsChange = this.onTagsChange.bind(this);\n  // }\n\n  const onTagsChange = async (event, values) => {\n    new Promise.all(values.map(entry => {\n      entry.pic = \"https://images.unsplash.com/photo-1517417196127-9ad11f8a8dd3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\"; // await fetchIngredient(entry.title).then((res) => res);\n\n      return entry;\n    })).then(setTags({\n      tags: values\n    })).then(console.log(tags));\n    props.onSelectIngredients(tags);\n  }; // render() {\n\n\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    multiple: true,\n    id: \"tags-outlined\",\n    style: {\n      color: \"white\"\n    } // id=\"tags-outlined\"\n    ,\n    options: top100Films,\n    getOptionLabel: option => option.title // defaultValue={}\n    ,\n    onChange: onTagsChange,\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params); // Suggest the creation of a new value\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue,\n          title: `${params.inputValue}`,\n          pic: \"\"\n        });\n      }\n\n      return filtered;\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: \"50%\",\n        padding: 50,\n        paddingBottom: 60,\n        left: \"68.4%\",\n        top: \"50%\",\n        position: \"absolute\",\n        transform: \"translate(-50%, -50%)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      style: {\n        color: \"white\",\n        fontFamily: \"Patua One\",\n        borderBottom: 0\n      } // s\n      ,\n      label: \" Ingredients\",\n      placeholder: \"Your Ingredients\" // margin=\"none\"\n      ,\n      fullWidth: true,\n      classes: {\n        root: classes.outlineRoot\n      },\n      multiline: true // multiline=\"false\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }\n    }))),\n    renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/React.createElement(Chip, Object.assign({\n      style: {\n        backgroundColor: \"#9E4244\",\n        color: \"white\",\n        height: 48,\n        fontFamily: \"Patua One\",\n        fontSize: 15,\n        marginTop: 10,\n        marginLeft: 10,\n        marginRight: 10\n      },\n      avatar: /*#__PURE__*/React.createElement(Avatar, {\n        style: {\n          width: 45,\n          height: 43\n        },\n        alt: \"Remy Sharp\",\n        src: option.pic,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 169\n        }\n      }),\n      variant: \"outlined\",\n      label: option.title\n    }, getTagProps({\n      index\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }))),\n    ListboxProps: {\n      style: {\n        backgroundColor: \"#9E4244\",\n        color: \"white\",\n        fontFamily: \"Patua One\"\n      }\n    },\n    noOptionsText: \"Type in Your Ingredients\",\n    classes: {\n      noOptions: classes.noOptions,\n      input: classes.input,\n      root: classes.root\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  });\n}; // }\n\n\n_s(IngredientOption, \"/L2LM53h/xJJHUeXvVwWNrpzwLI=\", false, function () {\n  return [useStyles];\n});\n\n_c = IngredientOption;\nIngredientOption.propTypes = {\n  onSelectIngredients: PropTypes.func.isRequired\n}; // IngredientOption.propTypes = {\n//   classes: PropTypes.func.isRequired,\n// };\n\nexport default IngredientOption; // export default withStyles(styles)(IngredientOption);\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\nconst top100Films = [// { title: 'apple', year: 1994, pic: \"\" },\n  // { title: 'The Godfather', year: 1972 },\n  // { title: 'The Godfather: Part II', year: 1974 },\n  // { title: 'The Dark Knight', year: 2008 },\n  // { title: '12 Angry Men', year: 1957 },\n  // { title: \"Schindler's List\", year: 1993 },\n  // { title: 'Pulp Fiction', year: 1994 },\n  // { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n  // { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  // { title: 'Fight Club', year: 1999 },\n  // { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n  // { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n  // { title: 'Forrest Gump', year: 1994 },\n  // { title: 'Inception', year: 2010 },\n  // { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n  // { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  // { title: 'Goodfellas', year: 1990 },\n  // { title: 'The Matrix', year: 1999 },\n  // { title: 'Seven Samurai', year: 1954 },\n  // { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n  // { title: 'City of God', year: 2002 },\n  // { title: 'Se7en', year: 1995 },\n  // { title: 'The Silence of the Lambs', year: 1991 },\n  // { title: \"It's a Wonderful Life\", year: 1946 },\n  // { title: 'Life Is Beautiful', year: 1997 },\n  // { title: 'The Usual Suspects', year: 1995 },\n  // { title: 'LÃ©on: The Professional', year: 1994 },\n  // { title: 'Spirited Away', year: 2001 },\n  // { title: 'Saving Private Ryan', year: 1998 },\n  // { title: 'Once Upon a Time in the West', year: 1968 },\n  // { title: 'American History X', year: 1998 },\n  // { title: 'Interstellar', year: 2014 },\n  // { title: 'Casablanca', year: 1942 },\n  // { title: 'City Lights', year: 1931 },\n  // { title: 'Psycho', year: 1960 },\n  // { title: 'The Green Mile', year: 1999 },\n  // { title: 'The Intouchables', year: 2011 },\n  // { title: 'Modern Times', year: 1936 },\n  // { title: 'Raiders of the Lost Ark', year: 1981 },\n  // { title: 'Rear Window', year: 1954 },\n  // { title: 'The Pianist', year: 2002 },\n  // { title: 'The Departed', year: 2006 },\n  // { title: 'Terminator 2: Judgment Day', year: 1991 },\n  // { title: 'Back to the Future', year: 1985 },\n  // { title: 'Whiplash', year: 2014 },\n  // { title: 'Gladiator', year: 2000 },\n  // { title: 'Memento', year: 2000 },\n  // { title: 'The Prestige', year: 2006 },\n  // { title: 'The Lion King', year: 1994 },\n  // { title: 'Apocalypse Now', year: 1979 },\n  // { title: 'Alien', year: 1979 },\n  // { title: 'Sunset Boulevard', year: 1950 },\n  // {\n  //   title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  //   year: 1964,\n  // },\n  // { title: 'The Great Dictator', year: 1940 },\n  // { title: 'Cinema Paradiso', year: 1988 },\n  // { title: 'The Lives of Others', year: 2006 },\n  // { title: 'Grave of the Fireflies', year: 1988 },\n  // { title: 'Paths of Glory', year: 1957 },\n  // { title: 'Django Unchained', year: 2012 },\n  // { title: 'The Shining', year: 1980 },\n  // { title: 'WALLÂ·E', year: 2008 },\n  // { title: 'American Beauty', year: 1999 },\n  // { title: 'The Dark Knight Rises', year: 2012 },\n  // { title: 'Princess Mononoke', year: 1997 },\n  // { title: 'Aliens', year: 1986 },\n  // { title: 'Oldboy', year: 2003 },\n  // { title: 'Once Upon a Time in America', year: 1984 },\n  // { title: 'Witness for the Prosecution', year: 1957 },\n  // { title: 'Das Boot', year: 1981 },\n  // { title: 'Citizen Kane', year: 1941 },\n  // { title: 'North by Northwest', year: 1959 },\n  // { title: 'Vertigo', year: 1958 },\n  // { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n  // { title: 'Reservoir Dogs', year: 1992 },\n  // { title: 'Braveheart', year: 1995 },\n  // { title: 'M', year: 1931 },\n  // { title: 'Requiem for a Dream', year: 2000 },\n  // { title: 'AmÃ©lie', year: 2001 },\n  // { title: 'A Clockwork Orange', year: 1971 },\n  // { title: 'Like Stars on Earth', year: 2007 },\n  // { title: 'Taxi Driver', year: 1976 },\n  // { title: 'Lawrence of Arabia', year: 1962 },\n  // { title: 'Double Indemnity', year: 1944 },\n  // { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n  // { title: 'Amadeus', year: 1984 },\n  // { title: 'To Kill a Mockingbird', year: 1962 },\n  // { title: 'Toy Story 3', year: 2010 },\n  // { title: 'Logan', year: 2017 },\n  // { title: 'Full Metal Jacket', year: 1987 },\n  // { title: 'Dangal', year: 2016 },\n  // { title: 'The Sting', year: 1973 },\n  // { title: '2001: A Space Odyssey', year: 1968 },\n  // { title: \"Singin' in the Rain\", year: 1952 },\n  // { title: 'Toy Story', year: 1995 },\n  // { title: 'Bicycle Thieves', year: 1948 },\n  // { title: 'The Kid', year: 1921 },\n  // { title: 'Inglourious Basterds', year: 2009 },\n  // { title: 'Snatch', year: 2000 },\n  // { title: '3 Idiots', year: 2009 },\n  // { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientOption\");","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/src/components/IngredientOption.js"],"names":["React","useState","Promise","Chip","Autocomplete","createFilterOptions","Avatar","makeStyles","TextField","PropTypes","fetchIngredient","useStyles","theme","noOptions","background","fontFamily","color","input","outlineRoot","width","height","borderColor","border","fontSize","filter","IngredientOption","props","tags","setTags","classes","onTagsChange","event","values","all","map","entry","pic","then","console","log","onSelectIngredients","top100Films","option","title","options","params","filtered","inputValue","push","padding","paddingBottom","left","top","position","transform","borderBottom","root","value","getTagProps","index","backgroundColor","marginTop","marginLeft","marginRight","style","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["\r\n/* eslint-disable no-use-before-define */\r\n/* eslint-disable react/jsx-props-no-spreading */\r\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\r\n/* eslint-disable no-unused-vars */\r\nimport React, {useState, Promise} from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Autocomplete,{createFilterOptions} from '@material-ui/lab/Autocomplete';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import { withStyles } from '@material-ui/core/styles';\r\n// import { getTag } from \"./tagFunction\";\r\n// import { array } from 'prop-types';\r\nimport PropTypes from 'prop-types';\r\nimport {fetchIngredient} from \"./getData\";\r\nimport \"../style/IngredientOption.css\";\r\n// import Chip from '@material-ui/core/Chip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  noOptions: {\r\n    background: \"#9E4244\",\r\n    fontFamily: \"Patua One\",\r\n    color: \"white\"\r\n  },\r\n  input: {\r\n    fontFamily: \"Patua One\",\r\n    color: \"white\",\r\n    // botderBottom:0\r\n  },\r\n  outlineRoot: {\r\n    // '.MuiListItemText-multiline': {\r\n    //   borderColor:\"red\"\r\n    // },\r\n    // \"& .MuiOutlinedInput-root .MuiInputBase-input\": {\r\n    //    borderBottom: 0,\r\n    //    outline: 0\r\n    // },\r\n    // // .MuiAutocomplete-inputFocused\r\n    // \"& .MuiOutlinedInput-root .Mui-focused\": {\r\n    //    borderBottom: 0\r\n    // },\r\n    \"& .makeStyles.root\": {\r\n      width:0,\r\n      height:0\r\n    },\r\n    \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: \"#E4C2C1\",\r\n      border:'5px solid'\r\n    },\r\n    \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: \"#B6666F\",\r\n      border:'5px solid'\r\n    },\r\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: \"#9E4244\",\r\n      border:'5px solid'\r\n    },\r\n    \"& .MuiOutlinedInput-input\": {\r\n      color: \"white\",\r\n      // borderBottom: 0\r\n    },\r\n    \"&:hover .MuiOutlinedInput-input\": {\r\n      color: \"#B6666F\"\r\n    },\r\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-input\": {\r\n      color: \"white\"\r\n    },\r\n    \"& .MuiInputLabel-outlined\": {\r\n      color: \"#E4C2C1\",\r\n      fontFamily: \"Patua One\",\r\n      fontSize:17\r\n    },\r\n    \"&:hover .MuiInputLabel-outlined\": {\r\n      color: \"#B6666F\",\r\n      fontFamily: \"Patua One\",\r\n      fontSize:17\r\n    },\r\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\r\n      color: \"white\",\r\n      fontFamily: \"Patua One\",\r\n      fontSize:17\r\n    },\r\n  },\r\n\r\n}));\r\n\r\n// const filter = createFilterOptions();\r\n\r\n    // values.forEach((value) => {\r\n    //   const theValue = value;\r\n    //   theValue.pic = fetchIngredient(value.title);\r\n    // }); \r\nconst filter = createFilterOptions();\r\n\r\n\r\n\r\n// const styles = theme => ({\r\n//   root: {\r\n//     background: '#8F0005',\r\n//     border: 2,\r\n//     borderRadius: 3,\r\n//     color: 'white',\r\n//     height: 50,\r\n//     with: 100\r\n//   },\r\n// });\r\n\r\n\r\n// class IngredientOption extends React.Component\r\nconst IngredientOption = (props) => {\r\n  const [tags, setTags] = useState([]);\r\n  const classes = useStyles();\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     tags: []\r\n  //   };\r\n  //   this.onTagsChange = this.onTagsChange.bind(this);\r\n  // }\r\n    \r\n  const onTagsChange = async (event, values) => {\r\n    new Promise.all(values.map((entry) => {\r\n      entry.pic = \"https://images.unsplash.com/photo-1517417196127-9ad11f8a8dd3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\"\r\n      // await fetchIngredient(entry.title).then((res) => res);\r\n      return entry;\r\n    })).then(\r\n      setTags({\r\n        tags: values\r\n      })\r\n    ).then(\r\n      console.log(tags)\r\n    );\r\n    \r\n    props.onSelectIngredients(tags);\r\n  }\r\n  \r\n  // render() {\r\n  return (\r\n    <Autocomplete\r\n      multiple\r\n      id=\"tags-outlined\"\r\n      style={{ \r\n        color: \"white\"}}\r\n      // id=\"tags-outlined\"\r\n      options={top100Films}\r\n      getOptionLabel={option => option.title}\r\n      // defaultValue={}\r\n      onChange={onTagsChange}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n  \r\n        // Suggest the creation of a new value\r\n        if (params.inputValue !== '') {\r\n          filtered.push({\r\n            inputValue: params.inputValue,\r\n            title: `${params.inputValue}`,\r\n            pic: \"\"\r\n          });\r\n        }\r\n  \r\n        return filtered;\r\n      }}\r\n      renderInput={params => (\r\n        <div style={{width:\"50%\", padding:50, paddingBottom:60, left: \"68.4%\", top: \"50%\", position:\"absolute\", transform: \"translate(-50%, -50%)\"}}>\r\n          <TextField\r\n            {...params}\r\n            variant=\"outlined\"\r\n            style={{color:\"white\",fontFamily:\"Patua One\", borderBottom: 0}}\r\n            // s\r\n            label=\" Ingredients\"\r\n            placeholder=\"Your Ingredients\"\r\n            // margin=\"none\"\r\n            fullWidth\r\n            classes={{root:classes.outlineRoot}}\r\n            multiline\r\n            // multiline=\"false\"\r\n          />\r\n        </div>\r\n      )}\r\n      renderTags={(value, getTagProps) =>\r\n        value.map((option, index) => (\r\n          <Chip style={{backgroundColor:\"#9E4244\", color:\"white\", height:48, fontFamily:\"Patua One\", fontSize:15, marginTop:10, marginLeft:10, marginRight:10}} avatar={<Avatar style={{width:45, height:43}} alt=\"Remy Sharp\" src={option.pic} />} variant=\"outlined\" label={option.title} {...getTagProps({ index })} />\r\n      ))}\r\n      ListboxProps={{style:{backgroundColor:\"#9E4244\", color:\"white\", fontFamily:\"Patua One\"}}}\r\n      noOptionsText=\"Type in Your Ingredients\"\r\n      classes={{noOptions:classes.noOptions, input:classes.input, root:classes.root}}\r\n\r\n    />\r\n  );\r\n}\r\n// }\r\nIngredientOption.propTypes = {\r\n  onSelectIngredients: PropTypes.func.isRequired,\r\n};\r\n\r\n// IngredientOption.propTypes = {\r\n//   classes: PropTypes.func.isRequired,\r\n// };\r\nexport default IngredientOption;\r\n// export default withStyles(styles)(IngredientOption);\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  // { title: 'apple', year: 1994, pic: \"\" },\r\n  // { title: 'The Godfather', year: 1972 },\r\n  // { title: 'The Godfather: Part II', year: 1974 },\r\n  // { title: 'The Dark Knight', year: 2008 },\r\n  // { title: '12 Angry Men', year: 1957 },\r\n  // { title: \"Schindler's List\", year: 1993 },\r\n  // { title: 'Pulp Fiction', year: 1994 },\r\n  // { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  // { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  // { title: 'Fight Club', year: 1999 },\r\n  // { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  // { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  // { title: 'Forrest Gump', year: 1994 },\r\n  // { title: 'Inception', year: 2010 },\r\n  // { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  // { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  // { title: 'Goodfellas', year: 1990 },\r\n  // { title: 'The Matrix', year: 1999 },\r\n  // { title: 'Seven Samurai', year: 1954 },\r\n  // { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  // { title: 'City of God', year: 2002 },\r\n  // { title: 'Se7en', year: 1995 },\r\n  // { title: 'The Silence of the Lambs', year: 1991 },\r\n  // { title: \"It's a Wonderful Life\", year: 1946 },\r\n  // { title: 'Life Is Beautiful', year: 1997 },\r\n  // { title: 'The Usual Suspects', year: 1995 },\r\n  // { title: 'LÃ©on: The Professional', year: 1994 },\r\n  // { title: 'Spirited Away', year: 2001 },\r\n  // { title: 'Saving Private Ryan', year: 1998 },\r\n  // { title: 'Once Upon a Time in the West', year: 1968 },\r\n  // { title: 'American History X', year: 1998 },\r\n  // { title: 'Interstellar', year: 2014 },\r\n  // { title: 'Casablanca', year: 1942 },\r\n  // { title: 'City Lights', year: 1931 },\r\n  // { title: 'Psycho', year: 1960 },\r\n  // { title: 'The Green Mile', year: 1999 },\r\n  // { title: 'The Intouchables', year: 2011 },\r\n  // { title: 'Modern Times', year: 1936 },\r\n  // { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  // { title: 'Rear Window', year: 1954 },\r\n  // { title: 'The Pianist', year: 2002 },\r\n  // { title: 'The Departed', year: 2006 },\r\n  // { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  // { title: 'Back to the Future', year: 1985 },\r\n  // { title: 'Whiplash', year: 2014 },\r\n  // { title: 'Gladiator', year: 2000 },\r\n  // { title: 'Memento', year: 2000 },\r\n  // { title: 'The Prestige', year: 2006 },\r\n  // { title: 'The Lion King', year: 1994 },\r\n  // { title: 'Apocalypse Now', year: 1979 },\r\n  // { title: 'Alien', year: 1979 },\r\n  // { title: 'Sunset Boulevard', year: 1950 },\r\n  // {\r\n  //   title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n  //   year: 1964,\r\n  // },\r\n  // { title: 'The Great Dictator', year: 1940 },\r\n  // { title: 'Cinema Paradiso', year: 1988 },\r\n  // { title: 'The Lives of Others', year: 2006 },\r\n  // { title: 'Grave of the Fireflies', year: 1988 },\r\n  // { title: 'Paths of Glory', year: 1957 },\r\n  // { title: 'Django Unchained', year: 2012 },\r\n  // { title: 'The Shining', year: 1980 },\r\n  // { title: 'WALLÂ·E', year: 2008 },\r\n  // { title: 'American Beauty', year: 1999 },\r\n  // { title: 'The Dark Knight Rises', year: 2012 },\r\n  // { title: 'Princess Mononoke', year: 1997 },\r\n  // { title: 'Aliens', year: 1986 },\r\n  // { title: 'Oldboy', year: 2003 },\r\n  // { title: 'Once Upon a Time in America', year: 1984 },\r\n  // { title: 'Witness for the Prosecution', year: 1957 },\r\n  // { title: 'Das Boot', year: 1981 },\r\n  // { title: 'Citizen Kane', year: 1941 },\r\n  // { title: 'North by Northwest', year: 1959 },\r\n  // { title: 'Vertigo', year: 1958 },\r\n  // { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  // { title: 'Reservoir Dogs', year: 1992 },\r\n  // { title: 'Braveheart', year: 1995 },\r\n  // { title: 'M', year: 1931 },\r\n  // { title: 'Requiem for a Dream', year: 2000 },\r\n  // { title: 'AmÃ©lie', year: 2001 },\r\n  // { title: 'A Clockwork Orange', year: 1971 },\r\n  // { title: 'Like Stars on Earth', year: 2007 },\r\n  // { title: 'Taxi Driver', year: 1976 },\r\n  // { title: 'Lawrence of Arabia', year: 1962 },\r\n  // { title: 'Double Indemnity', year: 1944 },\r\n  // { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  // { title: 'Amadeus', year: 1984 },\r\n  // { title: 'To Kill a Mockingbird', year: 1962 },\r\n  // { title: 'Toy Story 3', year: 2010 },\r\n  // { title: 'Logan', year: 2017 },\r\n  // { title: 'Full Metal Jacket', year: 1987 },\r\n  // { title: 'Dangal', year: 2016 },\r\n  // { title: 'The Sting', year: 1973 },\r\n  // { title: '2001: A Space Odyssey', year: 1968 },\r\n  // { title: \"Singin' in the Rain\", year: 1952 },\r\n  // { title: 'Toy Story', year: 1995 },\r\n  // { title: 'Bicycle Thieves', year: 1948 },\r\n  // { title: 'The Kid', year: 1921 },\r\n  // { title: 'Inglourious Basterds', year: 2009 },\r\n  // { title: 'Snatch', year: 2000 },\r\n  // { title: '3 Idiots', year: 2009 },\r\n  // { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}