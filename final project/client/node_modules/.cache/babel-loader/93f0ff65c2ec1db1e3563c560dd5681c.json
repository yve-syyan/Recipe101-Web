{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule DraftEntitySegments\r\n * @format\r\n * \r\n */\n'use strict';\n/**\r\n * Identify the range to delete from a segmented entity.\r\n *\r\n * Rules:\r\n *\r\n *  Example: 'John F. Kennedy'\r\n *\r\n *   - Deletion from within any non-whitespace (i.e. ['John', 'F.', 'Kennedy'])\r\n *     will return the range of that text.\r\n *\r\n *       'John F. Kennedy' -> 'John F.'\r\n *                  ^\r\n *\r\n *   - Forward deletion of whitespace will remove the following section:\r\n *\r\n *       'John F. Kennedy' -> 'John Kennedy'\r\n *            ^\r\n *\r\n *   - Backward deletion of whitespace will remove the previous section:\r\n *\r\n *       'John F. Kennedy' -> 'F. Kennedy'\r\n *            ^\r\n */\n\nvar DraftEntitySegments = {\n  getRemovalRange: function getRemovalRange(selectionStart, selectionEnd, text, entityStart, direction) {\n    var segments = text.split(' ');\n    segments = segments.map(function (\n    /*string*/\n    segment,\n    /*number*/\n    ii) {\n      if (direction === 'forward') {\n        if (ii > 0) {\n          return ' ' + segment;\n        }\n      } else if (ii < segments.length - 1) {\n        return segment + ' ';\n      }\n\n      return segment;\n    });\n    var segmentStart = entityStart;\n    var segmentEnd;\n    var segment;\n    var removalStart = null;\n    var removalEnd = null;\n\n    for (var jj = 0; jj < segments.length; jj++) {\n      segment = segments[jj];\n      segmentEnd = segmentStart + segment.length; // Our selection overlaps this segment.\n\n      if (selectionStart < segmentEnd && segmentStart < selectionEnd) {\n        if (removalStart !== null) {\n          removalEnd = segmentEnd;\n        } else {\n          removalStart = segmentStart;\n          removalEnd = segmentEnd;\n        }\n      } else if (removalStart !== null) {\n        break;\n      }\n\n      segmentStart = segmentEnd;\n    }\n\n    var entityEnd = entityStart + text.length;\n    var atStart = removalStart === entityStart;\n    var atEnd = removalEnd === entityEnd;\n\n    if (!atStart && atEnd || atStart && !atEnd) {\n      if (direction === 'forward') {\n        if (removalEnd !== entityEnd) {\n          removalEnd++;\n        }\n      } else if (removalStart !== entityStart) {\n        removalStart--;\n      }\n    }\n\n    return {\n      start: removalStart,\n      end: removalEnd\n    };\n  }\n};\nmodule.exports = DraftEntitySegments;","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/node_modules/draft-js/lib/DraftEntitySegments.js"],"names":["DraftEntitySegments","getRemovalRange","selectionStart","selectionEnd","text","entityStart","direction","segments","split","map","segment","ii","length","segmentStart","segmentEnd","removalStart","removalEnd","jj","entityEnd","atStart","atEnd","start","end","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,mBAAmB,GAAG;AACxBC,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBC,cAAzB,EAAyCC,YAAzC,EAAuDC,IAAvD,EAA6DC,WAA7D,EAA0EC,SAA1E,EAAqF;AACpG,QAAIC,QAAQ,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,CAAf;AACAD,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,GAAT,CAAa;AAAW;AAAUC,IAAAA,OAArB;AAA8B;AAAUC,IAAAA,EAAxC,EAA4C;AAClE,UAAIL,SAAS,KAAK,SAAlB,EAA6B;AAC3B,YAAIK,EAAE,GAAG,CAAT,EAAY;AACV,iBAAO,MAAMD,OAAb;AACD;AACF,OAJD,MAIO,IAAIC,EAAE,GAAGJ,QAAQ,CAACK,MAAT,GAAkB,CAA3B,EAA8B;AACnC,eAAOF,OAAO,GAAG,GAAjB;AACD;;AACD,aAAOA,OAAP;AACD,KATU,CAAX;AAWA,QAAIG,YAAY,GAAGR,WAAnB;AACA,QAAIS,UAAJ;AACA,QAAIJ,OAAJ;AACA,QAAIK,YAAY,GAAG,IAAnB;AACA,QAAIC,UAAU,GAAG,IAAjB;;AAEA,SAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGV,QAAQ,CAACK,MAA/B,EAAuCK,EAAE,EAAzC,EAA6C;AAC3CP,MAAAA,OAAO,GAAGH,QAAQ,CAACU,EAAD,CAAlB;AACAH,MAAAA,UAAU,GAAGD,YAAY,GAAGH,OAAO,CAACE,MAApC,CAF2C,CAI3C;;AACA,UAAIV,cAAc,GAAGY,UAAjB,IAA+BD,YAAY,GAAGV,YAAlD,EAAgE;AAC9D,YAAIY,YAAY,KAAK,IAArB,EAA2B;AACzBC,UAAAA,UAAU,GAAGF,UAAb;AACD,SAFD,MAEO;AACLC,UAAAA,YAAY,GAAGF,YAAf;AACAG,UAAAA,UAAU,GAAGF,UAAb;AACD;AACF,OAPD,MAOO,IAAIC,YAAY,KAAK,IAArB,EAA2B;AAChC;AACD;;AAEDF,MAAAA,YAAY,GAAGC,UAAf;AACD;;AAED,QAAII,SAAS,GAAGb,WAAW,GAAGD,IAAI,CAACQ,MAAnC;AACA,QAAIO,OAAO,GAAGJ,YAAY,KAAKV,WAA/B;AACA,QAAIe,KAAK,GAAGJ,UAAU,KAAKE,SAA3B;;AAEA,QAAI,CAACC,OAAD,IAAYC,KAAZ,IAAqBD,OAAO,IAAI,CAACC,KAArC,EAA4C;AAC1C,UAAId,SAAS,KAAK,SAAlB,EAA6B;AAC3B,YAAIU,UAAU,KAAKE,SAAnB,EAA8B;AAC5BF,UAAAA,UAAU;AACX;AACF,OAJD,MAIO,IAAID,YAAY,KAAKV,WAArB,EAAkC;AACvCU,QAAAA,YAAY;AACb;AACF;;AAED,WAAO;AACLM,MAAAA,KAAK,EAAEN,YADF;AAELO,MAAAA,GAAG,EAAEN;AAFA,KAAP;AAID;AAzDuB,CAA1B;AA4DAO,MAAM,CAACC,OAAP,GAAiBxB,mBAAjB","sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule DraftEntitySegments\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Identify the range to delete from a segmented entity.\r\n *\r\n * Rules:\r\n *\r\n *  Example: 'John F. Kennedy'\r\n *\r\n *   - Deletion from within any non-whitespace (i.e. ['John', 'F.', 'Kennedy'])\r\n *     will return the range of that text.\r\n *\r\n *       'John F. Kennedy' -> 'John F.'\r\n *                  ^\r\n *\r\n *   - Forward deletion of whitespace will remove the following section:\r\n *\r\n *       'John F. Kennedy' -> 'John Kennedy'\r\n *            ^\r\n *\r\n *   - Backward deletion of whitespace will remove the previous section:\r\n *\r\n *       'John F. Kennedy' -> 'F. Kennedy'\r\n *            ^\r\n */\r\nvar DraftEntitySegments = {\r\n  getRemovalRange: function getRemovalRange(selectionStart, selectionEnd, text, entityStart, direction) {\r\n    var segments = text.split(' ');\r\n    segments = segments.map(function ( /*string*/segment, /*number*/ii) {\r\n      if (direction === 'forward') {\r\n        if (ii > 0) {\r\n          return ' ' + segment;\r\n        }\r\n      } else if (ii < segments.length - 1) {\r\n        return segment + ' ';\r\n      }\r\n      return segment;\r\n    });\r\n\r\n    var segmentStart = entityStart;\r\n    var segmentEnd;\r\n    var segment;\r\n    var removalStart = null;\r\n    var removalEnd = null;\r\n\r\n    for (var jj = 0; jj < segments.length; jj++) {\r\n      segment = segments[jj];\r\n      segmentEnd = segmentStart + segment.length;\r\n\r\n      // Our selection overlaps this segment.\r\n      if (selectionStart < segmentEnd && segmentStart < selectionEnd) {\r\n        if (removalStart !== null) {\r\n          removalEnd = segmentEnd;\r\n        } else {\r\n          removalStart = segmentStart;\r\n          removalEnd = segmentEnd;\r\n        }\r\n      } else if (removalStart !== null) {\r\n        break;\r\n      }\r\n\r\n      segmentStart = segmentEnd;\r\n    }\r\n\r\n    var entityEnd = entityStart + text.length;\r\n    var atStart = removalStart === entityStart;\r\n    var atEnd = removalEnd === entityEnd;\r\n\r\n    if (!atStart && atEnd || atStart && !atEnd) {\r\n      if (direction === 'forward') {\r\n        if (removalEnd !== entityEnd) {\r\n          removalEnd++;\r\n        }\r\n      } else if (removalStart !== entityStart) {\r\n        removalStart--;\r\n      }\r\n    }\r\n\r\n    return {\r\n      start: removalStart,\r\n      end: removalEnd\r\n    };\r\n  }\r\n};\r\n\r\nmodule.exports = DraftEntitySegments;"]},"metadata":{},"sourceType":"script"}