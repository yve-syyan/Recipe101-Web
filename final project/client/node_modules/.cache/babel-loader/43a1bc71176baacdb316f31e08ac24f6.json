{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lepan\\\\Desktop\\\\CIS550-Project\\\\final project\\\\client\\\\src\\\\components\\\\IngredientOption.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react'; // import Chip from '@material-ui/core/Chip';\n\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete'; // import { makeStyles } from '@material-ui/core/styles';\n\nimport TextField from '@material-ui/core/TextField';\nconst filter = createFilterOptions();\nexport default function IngredientOption() {\n  _s();\n\n  const [value, setValue] = React.useState(null);\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    multiple: true,\n    id: \"tags-outlined\",\n    value: value,\n    onChange: (event, newValue) => {\n      if (typeof newValue === 'string') {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        // Create a new value from the user input\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params); // Suggest the creation of a new value\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue,\n          title: `Add \"${params.inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true // id=\"free-solo-with-text-demo\"\n    ,\n    options: top100Films,\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      } // Add \"xxx\" option created dynamically\n\n\n      if (option.inputValue) {\n        return option.inputValue;\n      } // Regular option\n\n\n      return option.title;\n    },\n    renderOption: option => option.title,\n    style: {\n      width: 300\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Free solo with text demo\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  });\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\n_s(IngredientOption, \"EEjdpY/CSe7/lDQurV9yi1RbKSs=\");\n\n_c = IngredientOption;\nconst top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: 'Pulp Fiction',\n  year: 1994\n}, {\n  title: 'The Lord of the Rings: The Return of the King',\n  year: 2003\n}, {\n  title: 'The Good, the Bad and the Ugly',\n  year: 1966\n}, {\n  title: 'Fight Club',\n  year: 1999\n}, {\n  title: 'The Lord of the Rings: The Fellowship of the Ring',\n  year: 2001\n}, {\n  title: 'Star Wars: Episode V - The Empire Strikes Back',\n  year: 1980\n}, {\n  title: 'Forrest Gump',\n  year: 1994\n}, {\n  title: 'Inception',\n  year: 2010\n}, {\n  title: 'The Lord of the Rings: The Two Towers',\n  year: 2002\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\",\n  year: 1975\n}, {\n  title: 'Goodfellas',\n  year: 1990\n}, {\n  title: 'The Matrix',\n  year: 1999\n}, {\n  title: 'Seven Samurai',\n  year: 1954\n}, {\n  title: 'Star Wars: Episode IV - A New Hope',\n  year: 1977\n}, {\n  title: 'City of God',\n  year: 2002\n}, {\n  title: 'Se7en',\n  year: 1995\n}, {\n  title: 'The Silence of the Lambs',\n  year: 1991\n}, {\n  title: \"It's a Wonderful Life\",\n  year: 1946\n}, {\n  title: 'Life Is Beautiful',\n  year: 1997\n}, {\n  title: 'The Usual Suspects',\n  year: 1995\n}, {\n  title: 'Léon: The Professional',\n  year: 1994\n}, {\n  title: 'Spirited Away',\n  year: 2001\n}, {\n  title: 'Saving Private Ryan',\n  year: 1998\n}, {\n  title: 'Once Upon a Time in the West',\n  year: 1968\n}, {\n  title: 'American History X',\n  year: 1998\n}, {\n  title: 'Interstellar',\n  year: 2014\n}, {\n  title: 'Casablanca',\n  year: 1942\n}, {\n  title: 'City Lights',\n  year: 1931\n}, {\n  title: 'Psycho',\n  year: 1960\n}, {\n  title: 'The Green Mile',\n  year: 1999\n}, {\n  title: 'The Intouchables',\n  year: 2011\n}, {\n  title: 'Modern Times',\n  year: 1936\n}, {\n  title: 'Raiders of the Lost Ark',\n  year: 1981\n}, {\n  title: 'Rear Window',\n  year: 1954\n}, {\n  title: 'The Pianist',\n  year: 2002\n}, {\n  title: 'The Departed',\n  year: 2006\n}, {\n  title: 'Terminator 2: Judgment Day',\n  year: 1991\n}, {\n  title: 'Back to the Future',\n  year: 1985\n}, {\n  title: 'Whiplash',\n  year: 2014\n}, {\n  title: 'Gladiator',\n  year: 2000\n}, {\n  title: 'Memento',\n  year: 2000\n}, {\n  title: 'The Prestige',\n  year: 2006\n}, {\n  title: 'The Lion King',\n  year: 1994\n}, {\n  title: 'Apocalypse Now',\n  year: 1979\n}, {\n  title: 'Alien',\n  year: 1979\n}, {\n  title: 'Sunset Boulevard',\n  year: 1950\n}, {\n  title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  year: 1964\n}, {\n  title: 'The Great Dictator',\n  year: 1940\n}, {\n  title: 'Cinema Paradiso',\n  year: 1988\n}, {\n  title: 'The Lives of Others',\n  year: 2006\n}, {\n  title: 'Grave of the Fireflies',\n  year: 1988\n}, {\n  title: 'Paths of Glory',\n  year: 1957\n}, {\n  title: 'Django Unchained',\n  year: 2012\n}, {\n  title: 'The Shining',\n  year: 1980\n}, {\n  title: 'WALL·E',\n  year: 2008\n}, {\n  title: 'American Beauty',\n  year: 1999\n}, {\n  title: 'The Dark Knight Rises',\n  year: 2012\n}, {\n  title: 'Princess Mononoke',\n  year: 1997\n}, {\n  title: 'Aliens',\n  year: 1986\n}, {\n  title: 'Oldboy',\n  year: 2003\n}, {\n  title: 'Once Upon a Time in America',\n  year: 1984\n}, {\n  title: 'Witness for the Prosecution',\n  year: 1957\n}, {\n  title: 'Das Boot',\n  year: 1981\n}, {\n  title: 'Citizen Kane',\n  year: 1941\n}, {\n  title: 'North by Northwest',\n  year: 1959\n}, {\n  title: 'Vertigo',\n  year: 1958\n}, {\n  title: 'Star Wars: Episode VI - Return of the Jedi',\n  year: 1983\n}, {\n  title: 'Reservoir Dogs',\n  year: 1992\n}, {\n  title: 'Braveheart',\n  year: 1995\n}, {\n  title: 'M',\n  year: 1931\n}, {\n  title: 'Requiem for a Dream',\n  year: 2000\n}, {\n  title: 'Amélie',\n  year: 2001\n}, {\n  title: 'A Clockwork Orange',\n  year: 1971\n}, {\n  title: 'Like Stars on Earth',\n  year: 2007\n}, {\n  title: 'Taxi Driver',\n  year: 1976\n}, {\n  title: 'Lawrence of Arabia',\n  year: 1962\n}, {\n  title: 'Double Indemnity',\n  year: 1944\n}, {\n  title: 'Eternal Sunshine of the Spotless Mind',\n  year: 2004\n}, {\n  title: 'Amadeus',\n  year: 1984\n}, {\n  title: 'To Kill a Mockingbird',\n  year: 1962\n}, {\n  title: 'Toy Story 3',\n  year: 2010\n}, {\n  title: 'Logan',\n  year: 2017\n}, {\n  title: 'Full Metal Jacket',\n  year: 1987\n}, {\n  title: 'Dangal',\n  year: 2016\n}, {\n  title: 'The Sting',\n  year: 1973\n}, {\n  title: '2001: A Space Odyssey',\n  year: 1968\n}, {\n  title: \"Singin' in the Rain\",\n  year: 1952\n}, {\n  title: 'Toy Story',\n  year: 1995\n}, {\n  title: 'Bicycle Thieves',\n  year: 1948\n}, {\n  title: 'The Kid',\n  year: 1921\n}, {\n  title: 'Inglourious Basterds',\n  year: 2009\n}, {\n  title: 'Snatch',\n  year: 2000\n}, {\n  title: '3 Idiots',\n  year: 2009\n}, {\n  title: 'Monty Python and the Holy Grail',\n  year: 1975\n}];\nexport { IngredientOption };\n\nvar _c;\n\n$RefreshReg$(_c, \"IngredientOption\");","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/src/components/IngredientOption.js"],"names":["React","Autocomplete","createFilterOptions","TextField","filter","IngredientOption","value","setValue","useState","event","newValue","title","inputValue","options","params","filtered","push","top100Films","option","width","year"],"mappings":";;;AACA;;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,YAAP,IAAuBC,mBAAvB,QAAkD,+BAAlD,C,CACA;;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,MAAMC,MAAM,GAAGF,mBAAmB,EAAlC;AAEA,eAAe,SAASG,gBAAT,GAA4B;AAAA;;AACzC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,KAAK,CAACQ,QAAN,CAAe,IAAf,CAA1B;AAEA,sBACE,oBAAC,YAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,EAAE,EAAC,eAFL;AAGE,IAAA,KAAK,EAAEF,KAHT;AAIE,IAAA,QAAQ,EAAE,CAACG,KAAD,EAAQC,QAAR,KAAqB;AAC7B,UAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCH,QAAAA,QAAQ,CAAC;AACPI,UAAAA,KAAK,EAAED;AADA,SAAD,CAAR;AAGD,OAJD,MAIO,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,UAAzB,EAAqC;AAC1C;AACAL,QAAAA,QAAQ,CAAC;AACPI,UAAAA,KAAK,EAAED,QAAQ,CAACE;AADT,SAAD,CAAR;AAGD,OALM,MAKA;AACLL,QAAAA,QAAQ,CAACG,QAAD,CAAR;AACD;AACF,KAjBH;AAkBE,IAAA,aAAa,EAAE,CAACG,OAAD,EAAUC,MAAV,KAAqB;AAClC,YAAMC,QAAQ,GAAGX,MAAM,CAACS,OAAD,EAAUC,MAAV,CAAvB,CADkC,CAGlC;;AACA,UAAIA,MAAM,CAACF,UAAP,KAAsB,EAA1B,EAA8B;AAC5BG,QAAAA,QAAQ,CAACC,IAAT,CAAc;AACZJ,UAAAA,UAAU,EAAEE,MAAM,CAACF,UADP;AAEZD,UAAAA,KAAK,EAAG,QAAOG,MAAM,CAACF,UAAW;AAFrB,SAAd;AAID;;AAED,aAAOG,QAAP;AACD,KA9BH;AA+BE,IAAA,aAAa,MA/Bf;AAgCE,IAAA,WAAW,MAhCb;AAiCE,IAAA,iBAAiB,MAjCnB,CAkCE;AAlCF;AAmCE,IAAA,OAAO,EAAEE,WAnCX;AAoCE,IAAA,cAAc,EAAGC,MAAD,IAAY;AAC1B;AACA,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAOA,MAAP;AACD,OAJyB,CAK1B;;;AACA,UAAIA,MAAM,CAACN,UAAX,EAAuB;AACrB,eAAOM,MAAM,CAACN,UAAd;AACD,OARyB,CAS1B;;;AACA,aAAOM,MAAM,CAACP,KAAd;AACD,KA/CH;AAgDE,IAAA,YAAY,EAAGO,MAAD,IAAYA,MAAM,CAACP,KAhDnC;AAiDE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,KAAK,EAAE;AAAT,KAjDT;AAkDE,IAAA,QAAQ,MAlDV;AAmDE,IAAA,WAAW,EAAGL,MAAD,iBACX,oBAAC,SAAD,oBAAeA,MAAf;AAAuB,MAAA,KAAK,EAAC,0BAA7B;AAAwD,MAAA,OAAO,EAAC,UAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OApDJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAyDD,C,CAED;;GA9DwBT,gB;;KAAAA,gB;AA+DxB,MAAMY,WAAW,GAAG,CAClB;AAAEN,EAAAA,KAAK,EAAE,0BAAT;AAAqCS,EAAAA,IAAI,EAAE;AAA3C,CADkB,EAElB;AAAET,EAAAA,KAAK,EAAE,eAAT;AAA0BS,EAAAA,IAAI,EAAE;AAAhC,CAFkB,EAGlB;AAAET,EAAAA,KAAK,EAAE,wBAAT;AAAmCS,EAAAA,IAAI,EAAE;AAAzC,CAHkB,EAIlB;AAAET,EAAAA,KAAK,EAAE,iBAAT;AAA4BS,EAAAA,IAAI,EAAE;AAAlC,CAJkB,EAKlB;AAAET,EAAAA,KAAK,EAAE,cAAT;AAAyBS,EAAAA,IAAI,EAAE;AAA/B,CALkB,EAMlB;AAAET,EAAAA,KAAK,EAAE,kBAAT;AAA6BS,EAAAA,IAAI,EAAE;AAAnC,CANkB,EAOlB;AAAET,EAAAA,KAAK,EAAE,cAAT;AAAyBS,EAAAA,IAAI,EAAE;AAA/B,CAPkB,EAQlB;AAAET,EAAAA,KAAK,EAAE,+CAAT;AAA0DS,EAAAA,IAAI,EAAE;AAAhE,CARkB,EASlB;AAAET,EAAAA,KAAK,EAAE,gCAAT;AAA2CS,EAAAA,IAAI,EAAE;AAAjD,CATkB,EAUlB;AAAET,EAAAA,KAAK,EAAE,YAAT;AAAuBS,EAAAA,IAAI,EAAE;AAA7B,CAVkB,EAWlB;AAAET,EAAAA,KAAK,EAAE,mDAAT;AAA8DS,EAAAA,IAAI,EAAE;AAApE,CAXkB,EAYlB;AAAET,EAAAA,KAAK,EAAE,gDAAT;AAA2DS,EAAAA,IAAI,EAAE;AAAjE,CAZkB,EAalB;AAAET,EAAAA,KAAK,EAAE,cAAT;AAAyBS,EAAAA,IAAI,EAAE;AAA/B,CAbkB,EAclB;AAAET,EAAAA,KAAK,EAAE,WAAT;AAAsBS,EAAAA,IAAI,EAAE;AAA5B,CAdkB,EAelB;AAAET,EAAAA,KAAK,EAAE,uCAAT;AAAkDS,EAAAA,IAAI,EAAE;AAAxD,CAfkB,EAgBlB;AAAET,EAAAA,KAAK,EAAE,iCAAT;AAA4CS,EAAAA,IAAI,EAAE;AAAlD,CAhBkB,EAiBlB;AAAET,EAAAA,KAAK,EAAE,YAAT;AAAuBS,EAAAA,IAAI,EAAE;AAA7B,CAjBkB,EAkBlB;AAAET,EAAAA,KAAK,EAAE,YAAT;AAAuBS,EAAAA,IAAI,EAAE;AAA7B,CAlBkB,EAmBlB;AAAET,EAAAA,KAAK,EAAE,eAAT;AAA0BS,EAAAA,IAAI,EAAE;AAAhC,CAnBkB,EAoBlB;AAAET,EAAAA,KAAK,EAAE,oCAAT;AAA+CS,EAAAA,IAAI,EAAE;AAArD,CApBkB,EAqBlB;AAAET,EAAAA,KAAK,EAAE,aAAT;AAAwBS,EAAAA,IAAI,EAAE;AAA9B,CArBkB,EAsBlB;AAAET,EAAAA,KAAK,EAAE,OAAT;AAAkBS,EAAAA,IAAI,EAAE;AAAxB,CAtBkB,EAuBlB;AAAET,EAAAA,KAAK,EAAE,0BAAT;AAAqCS,EAAAA,IAAI,EAAE;AAA3C,CAvBkB,EAwBlB;AAAET,EAAAA,KAAK,EAAE,uBAAT;AAAkCS,EAAAA,IAAI,EAAE;AAAxC,CAxBkB,EAyBlB;AAAET,EAAAA,KAAK,EAAE,mBAAT;AAA8BS,EAAAA,IAAI,EAAE;AAApC,CAzBkB,EA0BlB;AAAET,EAAAA,KAAK,EAAE,oBAAT;AAA+BS,EAAAA,IAAI,EAAE;AAArC,CA1BkB,EA2BlB;AAAET,EAAAA,KAAK,EAAE,wBAAT;AAAmCS,EAAAA,IAAI,EAAE;AAAzC,CA3BkB,EA4BlB;AAAET,EAAAA,KAAK,EAAE,eAAT;AAA0BS,EAAAA,IAAI,EAAE;AAAhC,CA5BkB,EA6BlB;AAAET,EAAAA,KAAK,EAAE,qBAAT;AAAgCS,EAAAA,IAAI,EAAE;AAAtC,CA7BkB,EA8BlB;AAAET,EAAAA,KAAK,EAAE,8BAAT;AAAyCS,EAAAA,IAAI,EAAE;AAA/C,CA9BkB,EA+BlB;AAAET,EAAAA,KAAK,EAAE,oBAAT;AAA+BS,EAAAA,IAAI,EAAE;AAArC,CA/BkB,EAgClB;AAAET,EAAAA,KAAK,EAAE,cAAT;AAAyBS,EAAAA,IAAI,EAAE;AAA/B,CAhCkB,EAiClB;AAAET,EAAAA,KAAK,EAAE,YAAT;AAAuBS,EAAAA,IAAI,EAAE;AAA7B,CAjCkB,EAkClB;AAAET,EAAAA,KAAK,EAAE,aAAT;AAAwBS,EAAAA,IAAI,EAAE;AAA9B,CAlCkB,EAmClB;AAAET,EAAAA,KAAK,EAAE,QAAT;AAAmBS,EAAAA,IAAI,EAAE;AAAzB,CAnCkB,EAoClB;AAAET,EAAAA,KAAK,EAAE,gBAAT;AAA2BS,EAAAA,IAAI,EAAE;AAAjC,CApCkB,EAqClB;AAAET,EAAAA,KAAK,EAAE,kBAAT;AAA6BS,EAAAA,IAAI,EAAE;AAAnC,CArCkB,EAsClB;AAAET,EAAAA,KAAK,EAAE,cAAT;AAAyBS,EAAAA,IAAI,EAAE;AAA/B,CAtCkB,EAuClB;AAAET,EAAAA,KAAK,EAAE,yBAAT;AAAoCS,EAAAA,IAAI,EAAE;AAA1C,CAvCkB,EAwClB;AAAET,EAAAA,KAAK,EAAE,aAAT;AAAwBS,EAAAA,IAAI,EAAE;AAA9B,CAxCkB,EAyClB;AAAET,EAAAA,KAAK,EAAE,aAAT;AAAwBS,EAAAA,IAAI,EAAE;AAA9B,CAzCkB,EA0ClB;AAAET,EAAAA,KAAK,EAAE,cAAT;AAAyBS,EAAAA,IAAI,EAAE;AAA/B,CA1CkB,EA2ClB;AAAET,EAAAA,KAAK,EAAE,4BAAT;AAAuCS,EAAAA,IAAI,EAAE;AAA7C,CA3CkB,EA4ClB;AAAET,EAAAA,KAAK,EAAE,oBAAT;AAA+BS,EAAAA,IAAI,EAAE;AAArC,CA5CkB,EA6ClB;AAAET,EAAAA,KAAK,EAAE,UAAT;AAAqBS,EAAAA,IAAI,EAAE;AAA3B,CA7CkB,EA8ClB;AAAET,EAAAA,KAAK,EAAE,WAAT;AAAsBS,EAAAA,IAAI,EAAE;AAA5B,CA9CkB,EA+ClB;AAAET,EAAAA,KAAK,EAAE,SAAT;AAAoBS,EAAAA,IAAI,EAAE;AAA1B,CA/CkB,EAgDlB;AAAET,EAAAA,KAAK,EAAE,cAAT;AAAyBS,EAAAA,IAAI,EAAE;AAA/B,CAhDkB,EAiDlB;AAAET,EAAAA,KAAK,EAAE,eAAT;AAA0BS,EAAAA,IAAI,EAAE;AAAhC,CAjDkB,EAkDlB;AAAET,EAAAA,KAAK,EAAE,gBAAT;AAA2BS,EAAAA,IAAI,EAAE;AAAjC,CAlDkB,EAmDlB;AAAET,EAAAA,KAAK,EAAE,OAAT;AAAkBS,EAAAA,IAAI,EAAE;AAAxB,CAnDkB,EAoDlB;AAAET,EAAAA,KAAK,EAAE,kBAAT;AAA6BS,EAAAA,IAAI,EAAE;AAAnC,CApDkB,EAqDlB;AACET,EAAAA,KAAK,EAAE,sEADT;AAEES,EAAAA,IAAI,EAAE;AAFR,CArDkB,EAyDlB;AAAET,EAAAA,KAAK,EAAE,oBAAT;AAA+BS,EAAAA,IAAI,EAAE;AAArC,CAzDkB,EA0DlB;AAAET,EAAAA,KAAK,EAAE,iBAAT;AAA4BS,EAAAA,IAAI,EAAE;AAAlC,CA1DkB,EA2DlB;AAAET,EAAAA,KAAK,EAAE,qBAAT;AAAgCS,EAAAA,IAAI,EAAE;AAAtC,CA3DkB,EA4DlB;AAAET,EAAAA,KAAK,EAAE,wBAAT;AAAmCS,EAAAA,IAAI,EAAE;AAAzC,CA5DkB,EA6DlB;AAAET,EAAAA,KAAK,EAAE,gBAAT;AAA2BS,EAAAA,IAAI,EAAE;AAAjC,CA7DkB,EA8DlB;AAAET,EAAAA,KAAK,EAAE,kBAAT;AAA6BS,EAAAA,IAAI,EAAE;AAAnC,CA9DkB,EA+DlB;AAAET,EAAAA,KAAK,EAAE,aAAT;AAAwBS,EAAAA,IAAI,EAAE;AAA9B,CA/DkB,EAgElB;AAAET,EAAAA,KAAK,EAAE,QAAT;AAAmBS,EAAAA,IAAI,EAAE;AAAzB,CAhEkB,EAiElB;AAAET,EAAAA,KAAK,EAAE,iBAAT;AAA4BS,EAAAA,IAAI,EAAE;AAAlC,CAjEkB,EAkElB;AAAET,EAAAA,KAAK,EAAE,uBAAT;AAAkCS,EAAAA,IAAI,EAAE;AAAxC,CAlEkB,EAmElB;AAAET,EAAAA,KAAK,EAAE,mBAAT;AAA8BS,EAAAA,IAAI,EAAE;AAApC,CAnEkB,EAoElB;AAAET,EAAAA,KAAK,EAAE,QAAT;AAAmBS,EAAAA,IAAI,EAAE;AAAzB,CApEkB,EAqElB;AAAET,EAAAA,KAAK,EAAE,QAAT;AAAmBS,EAAAA,IAAI,EAAE;AAAzB,CArEkB,EAsElB;AAAET,EAAAA,KAAK,EAAE,6BAAT;AAAwCS,EAAAA,IAAI,EAAE;AAA9C,CAtEkB,EAuElB;AAAET,EAAAA,KAAK,EAAE,6BAAT;AAAwCS,EAAAA,IAAI,EAAE;AAA9C,CAvEkB,EAwElB;AAAET,EAAAA,KAAK,EAAE,UAAT;AAAqBS,EAAAA,IAAI,EAAE;AAA3B,CAxEkB,EAyElB;AAAET,EAAAA,KAAK,EAAE,cAAT;AAAyBS,EAAAA,IAAI,EAAE;AAA/B,CAzEkB,EA0ElB;AAAET,EAAAA,KAAK,EAAE,oBAAT;AAA+BS,EAAAA,IAAI,EAAE;AAArC,CA1EkB,EA2ElB;AAAET,EAAAA,KAAK,EAAE,SAAT;AAAoBS,EAAAA,IAAI,EAAE;AAA1B,CA3EkB,EA4ElB;AAAET,EAAAA,KAAK,EAAE,4CAAT;AAAuDS,EAAAA,IAAI,EAAE;AAA7D,CA5EkB,EA6ElB;AAAET,EAAAA,KAAK,EAAE,gBAAT;AAA2BS,EAAAA,IAAI,EAAE;AAAjC,CA7EkB,EA8ElB;AAAET,EAAAA,KAAK,EAAE,YAAT;AAAuBS,EAAAA,IAAI,EAAE;AAA7B,CA9EkB,EA+ElB;AAAET,EAAAA,KAAK,EAAE,GAAT;AAAcS,EAAAA,IAAI,EAAE;AAApB,CA/EkB,EAgFlB;AAAET,EAAAA,KAAK,EAAE,qBAAT;AAAgCS,EAAAA,IAAI,EAAE;AAAtC,CAhFkB,EAiFlB;AAAET,EAAAA,KAAK,EAAE,QAAT;AAAmBS,EAAAA,IAAI,EAAE;AAAzB,CAjFkB,EAkFlB;AAAET,EAAAA,KAAK,EAAE,oBAAT;AAA+BS,EAAAA,IAAI,EAAE;AAArC,CAlFkB,EAmFlB;AAAET,EAAAA,KAAK,EAAE,qBAAT;AAAgCS,EAAAA,IAAI,EAAE;AAAtC,CAnFkB,EAoFlB;AAAET,EAAAA,KAAK,EAAE,aAAT;AAAwBS,EAAAA,IAAI,EAAE;AAA9B,CApFkB,EAqFlB;AAAET,EAAAA,KAAK,EAAE,oBAAT;AAA+BS,EAAAA,IAAI,EAAE;AAArC,CArFkB,EAsFlB;AAAET,EAAAA,KAAK,EAAE,kBAAT;AAA6BS,EAAAA,IAAI,EAAE;AAAnC,CAtFkB,EAuFlB;AAAET,EAAAA,KAAK,EAAE,uCAAT;AAAkDS,EAAAA,IAAI,EAAE;AAAxD,CAvFkB,EAwFlB;AAAET,EAAAA,KAAK,EAAE,SAAT;AAAoBS,EAAAA,IAAI,EAAE;AAA1B,CAxFkB,EAyFlB;AAAET,EAAAA,KAAK,EAAE,uBAAT;AAAkCS,EAAAA,IAAI,EAAE;AAAxC,CAzFkB,EA0FlB;AAAET,EAAAA,KAAK,EAAE,aAAT;AAAwBS,EAAAA,IAAI,EAAE;AAA9B,CA1FkB,EA2FlB;AAAET,EAAAA,KAAK,EAAE,OAAT;AAAkBS,EAAAA,IAAI,EAAE;AAAxB,CA3FkB,EA4FlB;AAAET,EAAAA,KAAK,EAAE,mBAAT;AAA8BS,EAAAA,IAAI,EAAE;AAApC,CA5FkB,EA6FlB;AAAET,EAAAA,KAAK,EAAE,QAAT;AAAmBS,EAAAA,IAAI,EAAE;AAAzB,CA7FkB,EA8FlB;AAAET,EAAAA,KAAK,EAAE,WAAT;AAAsBS,EAAAA,IAAI,EAAE;AAA5B,CA9FkB,EA+FlB;AAAET,EAAAA,KAAK,EAAE,uBAAT;AAAkCS,EAAAA,IAAI,EAAE;AAAxC,CA/FkB,EAgGlB;AAAET,EAAAA,KAAK,EAAE,qBAAT;AAAgCS,EAAAA,IAAI,EAAE;AAAtC,CAhGkB,EAiGlB;AAAET,EAAAA,KAAK,EAAE,WAAT;AAAsBS,EAAAA,IAAI,EAAE;AAA5B,CAjGkB,EAkGlB;AAAET,EAAAA,KAAK,EAAE,iBAAT;AAA4BS,EAAAA,IAAI,EAAE;AAAlC,CAlGkB,EAmGlB;AAAET,EAAAA,KAAK,EAAE,SAAT;AAAoBS,EAAAA,IAAI,EAAE;AAA1B,CAnGkB,EAoGlB;AAAET,EAAAA,KAAK,EAAE,sBAAT;AAAiCS,EAAAA,IAAI,EAAE;AAAvC,CApGkB,EAqGlB;AAAET,EAAAA,KAAK,EAAE,QAAT;AAAmBS,EAAAA,IAAI,EAAE;AAAzB,CArGkB,EAsGlB;AAAET,EAAAA,KAAK,EAAE,UAAT;AAAqBS,EAAAA,IAAI,EAAE;AAA3B,CAtGkB,EAuGlB;AAAET,EAAAA,KAAK,EAAE,iCAAT;AAA4CS,EAAAA,IAAI,EAAE;AAAlD,CAvGkB,CAApB;AAyGA,SAAQf,gBAAR","sourcesContent":["\r\n/* eslint-disable no-use-before-define */\r\n/* eslint-disable react/jsx-props-no-spreading */\r\nimport React from 'react';\r\n// import Chip from '@material-ui/core/Chip';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport default function IngredientOption() {\r\n  const [value, setValue] = React.useState(null);\r\n\r\n  return (\r\n    <Autocomplete\r\n      multiple\r\n      id=\"tags-outlined\"\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n          setValue({\r\n            title: newValue,\r\n          });\r\n        } else if (newValue && newValue.inputValue) {\r\n          // Create a new value from the user input\r\n          setValue({\r\n            title: newValue.inputValue,\r\n          });\r\n        } else {\r\n          setValue(newValue);\r\n        }\r\n      }}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n\r\n        // Suggest the creation of a new value\r\n        if (params.inputValue !== '') {\r\n          filtered.push({\r\n            inputValue: params.inputValue,\r\n            title: `Add \"${params.inputValue}\"`,\r\n          });\r\n        }\r\n\r\n        return filtered;\r\n      }}\r\n      selectOnFocus\r\n      clearOnBlur\r\n      handleHomeEndKeys\r\n      // id=\"free-solo-with-text-demo\"\r\n      options={top100Films}\r\n      getOptionLabel={(option) => {\r\n        // Value selected with enter, right from the input\r\n        if (typeof option === 'string') {\r\n          return option;\r\n        }\r\n        // Add \"xxx\" option created dynamically\r\n        if (option.inputValue) {\r\n          return option.inputValue;\r\n        }\r\n        // Regular option\r\n        return option.title;\r\n      }}\r\n      renderOption={(option) => option.title}\r\n      style={{ width: 300 }}\r\n      freeSolo\r\n      renderInput={(params) => (\r\n        <TextField {...params} label=\"Free solo with text demo\" variant=\"outlined\" />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'The Shawshank Redemption', year: 1994 },\r\n  { title: 'The Godfather', year: 1972 },\r\n  { title: 'The Godfather: Part II', year: 1974 },\r\n  { title: 'The Dark Knight', year: 2008 },\r\n  { title: '12 Angry Men', year: 1957 },\r\n  { title: \"Schindler's List\", year: 1993 },\r\n  { title: 'Pulp Fiction', year: 1994 },\r\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  { title: 'Fight Club', year: 1999 },\r\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  { title: 'Forrest Gump', year: 1994 },\r\n  { title: 'Inception', year: 2010 },\r\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  { title: 'Goodfellas', year: 1990 },\r\n  { title: 'The Matrix', year: 1999 },\r\n  { title: 'Seven Samurai', year: 1954 },\r\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  { title: 'City of God', year: 2002 },\r\n  { title: 'Se7en', year: 1995 },\r\n  { title: 'The Silence of the Lambs', year: 1991 },\r\n  { title: \"It's a Wonderful Life\", year: 1946 },\r\n  { title: 'Life Is Beautiful', year: 1997 },\r\n  { title: 'The Usual Suspects', year: 1995 },\r\n  { title: 'Léon: The Professional', year: 1994 },\r\n  { title: 'Spirited Away', year: 2001 },\r\n  { title: 'Saving Private Ryan', year: 1998 },\r\n  { title: 'Once Upon a Time in the West', year: 1968 },\r\n  { title: 'American History X', year: 1998 },\r\n  { title: 'Interstellar', year: 2014 },\r\n  { title: 'Casablanca', year: 1942 },\r\n  { title: 'City Lights', year: 1931 },\r\n  { title: 'Psycho', year: 1960 },\r\n  { title: 'The Green Mile', year: 1999 },\r\n  { title: 'The Intouchables', year: 2011 },\r\n  { title: 'Modern Times', year: 1936 },\r\n  { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  { title: 'Rear Window', year: 1954 },\r\n  { title: 'The Pianist', year: 2002 },\r\n  { title: 'The Departed', year: 2006 },\r\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  { title: 'Back to the Future', year: 1985 },\r\n  { title: 'Whiplash', year: 2014 },\r\n  { title: 'Gladiator', year: 2000 },\r\n  { title: 'Memento', year: 2000 },\r\n  { title: 'The Prestige', year: 2006 },\r\n  { title: 'The Lion King', year: 1994 },\r\n  { title: 'Apocalypse Now', year: 1979 },\r\n  { title: 'Alien', year: 1979 },\r\n  { title: 'Sunset Boulevard', year: 1950 },\r\n  {\r\n    title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n    year: 1964,\r\n  },\r\n  { title: 'The Great Dictator', year: 1940 },\r\n  { title: 'Cinema Paradiso', year: 1988 },\r\n  { title: 'The Lives of Others', year: 2006 },\r\n  { title: 'Grave of the Fireflies', year: 1988 },\r\n  { title: 'Paths of Glory', year: 1957 },\r\n  { title: 'Django Unchained', year: 2012 },\r\n  { title: 'The Shining', year: 1980 },\r\n  { title: 'WALL·E', year: 2008 },\r\n  { title: 'American Beauty', year: 1999 },\r\n  { title: 'The Dark Knight Rises', year: 2012 },\r\n  { title: 'Princess Mononoke', year: 1997 },\r\n  { title: 'Aliens', year: 1986 },\r\n  { title: 'Oldboy', year: 2003 },\r\n  { title: 'Once Upon a Time in America', year: 1984 },\r\n  { title: 'Witness for the Prosecution', year: 1957 },\r\n  { title: 'Das Boot', year: 1981 },\r\n  { title: 'Citizen Kane', year: 1941 },\r\n  { title: 'North by Northwest', year: 1959 },\r\n  { title: 'Vertigo', year: 1958 },\r\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  { title: 'Reservoir Dogs', year: 1992 },\r\n  { title: 'Braveheart', year: 1995 },\r\n  { title: 'M', year: 1931 },\r\n  { title: 'Requiem for a Dream', year: 2000 },\r\n  { title: 'Amélie', year: 2001 },\r\n  { title: 'A Clockwork Orange', year: 1971 },\r\n  { title: 'Like Stars on Earth', year: 2007 },\r\n  { title: 'Taxi Driver', year: 1976 },\r\n  { title: 'Lawrence of Arabia', year: 1962 },\r\n  { title: 'Double Indemnity', year: 1944 },\r\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  { title: 'Amadeus', year: 1984 },\r\n  { title: 'To Kill a Mockingbird', year: 1962 },\r\n  { title: 'Toy Story 3', year: 2010 },\r\n  { title: 'Logan', year: 2017 },\r\n  { title: 'Full Metal Jacket', year: 1987 },\r\n  { title: 'Dangal', year: 2016 },\r\n  { title: 'The Sting', year: 1973 },\r\n  { title: '2001: A Space Odyssey', year: 1968 },\r\n  { title: \"Singin' in the Rain\", year: 1952 },\r\n  { title: 'Toy Story', year: 1995 },\r\n  { title: 'Bicycle Thieves', year: 1948 },\r\n  { title: 'The Kid', year: 1921 },\r\n  { title: 'Inglourious Basterds', year: 2009 },\r\n  { title: 'Snatch', year: 2000 },\r\n  { title: '3 Idiots', year: 2009 },\r\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\nexport {IngredientOption};\r\n"]},"metadata":{},"sourceType":"module"}