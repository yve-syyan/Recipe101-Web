{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n * \r\n */\n\n/**\r\n * Stateful API for text direction detection\r\n *\r\n * This class can be used in applications where you need to detect the\r\n * direction of a sequence of text blocks, where each direction shall be used\r\n * as the fallback direction for the next one.\r\n *\r\n * NOTE: A default direction, if not provided, is set based on the global\r\n *       direction, as defined by `UnicodeBidiDirection`.\r\n *\r\n * == Example ==\r\n * ```\r\n * var UnicodeBidiService = require('UnicodeBidiService');\r\n *\r\n * var bidiService = new UnicodeBidiService();\r\n *\r\n * ...\r\n *\r\n * bidiService.reset();\r\n * for (var para in paragraphs) {\r\n *   var dir = bidiService.getDirection(para);\r\n *   ...\r\n * }\r\n * ```\r\n *\r\n * Part of our implementation of Unicode Bidirectional Algorithm (UBA)\r\n * Unicode Standard Annex #9 (UAX9)\r\n * http://www.unicode.org/reports/tr9/\r\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar UnicodeBidi = require('./UnicodeBidi');\n\nvar UnicodeBidiDirection = require('./UnicodeBidiDirection');\n\nvar invariant = require('./invariant');\n\nvar UnicodeBidiService = function () {\n  /**\r\n   * Stateful class for paragraph direction detection\r\n   *\r\n   * @param defaultDir  Default direction of the service\r\n   */\n  function UnicodeBidiService(defaultDir) {\n    _classCallCheck(this, UnicodeBidiService);\n\n    if (!defaultDir) {\n      defaultDir = UnicodeBidiDirection.getGlobalDir();\n    } else {\n      !UnicodeBidiDirection.isStrong(defaultDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Default direction must be a strong direction (LTR or RTL)') : invariant(false) : void 0;\n    }\n\n    this._defaultDir = defaultDir;\n    this.reset();\n  }\n  /**\r\n   * Reset the internal state\r\n   *\r\n   * Instead of creating a new instance, you can just reset() your instance\r\n   * everytime you start a new loop.\r\n   */\n\n\n  UnicodeBidiService.prototype.reset = function reset() {\n    this._lastDir = this._defaultDir;\n  };\n  /**\r\n   * Returns the direction of a block of text, and remembers it as the\r\n   * fall-back direction for the next paragraph.\r\n   *\r\n   * @param str  A text block, e.g. paragraph, table cell, tag\r\n   * @return     The resolved direction\r\n   */\n\n\n  UnicodeBidiService.prototype.getDirection = function getDirection(str) {\n    this._lastDir = UnicodeBidi.getDirection(str, this._lastDir);\n    return this._lastDir;\n  };\n\n  return UnicodeBidiService;\n}();\n\nmodule.exports = UnicodeBidiService;","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/node_modules/fbjs/lib/UnicodeBidiService.js"],"names":["_classCallCheck","instance","Constructor","TypeError","UnicodeBidi","require","UnicodeBidiDirection","invariant","UnicodeBidiService","defaultDir","getGlobalDir","isStrong","process","env","NODE_ENV","_defaultDir","reset","prototype","_lastDir","getDirection","str","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,IAAIC,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIG,kBAAkB,GAAG,YAAY;AAEnC;AACF;AACA;AACA;AACA;AACE,WAASA,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCT,IAAAA,eAAe,CAAC,IAAD,EAAOQ,kBAAP,CAAf;;AAEA,QAAI,CAACC,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAGH,oBAAoB,CAACI,YAArB,EAAb;AACD,KAFD,MAEO;AACL,OAACJ,oBAAoB,CAACK,QAArB,CAA8BF,UAA9B,CAAD,GAA6CG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCP,SAAS,CAAC,KAAD,EAAQ,2DAAR,CAAjD,GAAwHA,SAAS,CAAC,KAAD,CAA9K,GAAwL,KAAK,CAA7L;AACD;;AACD,SAAKQ,WAAL,GAAmBN,UAAnB;AACA,SAAKO,KAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AAGER,EAAAA,kBAAkB,CAACS,SAAnB,CAA6BD,KAA7B,GAAqC,SAASA,KAAT,GAAiB;AACpD,SAAKE,QAAL,GAAgB,KAAKH,WAArB;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGEP,EAAAA,kBAAkB,CAACS,SAAnB,CAA6BE,YAA7B,GAA4C,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACrE,SAAKF,QAAL,GAAgBd,WAAW,CAACe,YAAZ,CAAyBC,GAAzB,EAA8B,KAAKF,QAAnC,CAAhB;AACA,WAAO,KAAKA,QAAZ;AACD,GAHD;;AAKA,SAAOV,kBAAP;AACD,CA9CwB,EAAzB;;AAgDAa,MAAM,CAACC,OAAP,GAAiBd,kBAAjB","sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @typechecks\r\n * \r\n */\r\n\r\n/**\r\n * Stateful API for text direction detection\r\n *\r\n * This class can be used in applications where you need to detect the\r\n * direction of a sequence of text blocks, where each direction shall be used\r\n * as the fallback direction for the next one.\r\n *\r\n * NOTE: A default direction, if not provided, is set based on the global\r\n *       direction, as defined by `UnicodeBidiDirection`.\r\n *\r\n * == Example ==\r\n * ```\r\n * var UnicodeBidiService = require('UnicodeBidiService');\r\n *\r\n * var bidiService = new UnicodeBidiService();\r\n *\r\n * ...\r\n *\r\n * bidiService.reset();\r\n * for (var para in paragraphs) {\r\n *   var dir = bidiService.getDirection(para);\r\n *   ...\r\n * }\r\n * ```\r\n *\r\n * Part of our implementation of Unicode Bidirectional Algorithm (UBA)\r\n * Unicode Standard Annex #9 (UAX9)\r\n * http://www.unicode.org/reports/tr9/\r\n */\r\n\r\n'use strict';\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nvar UnicodeBidi = require('./UnicodeBidi');\r\nvar UnicodeBidiDirection = require('./UnicodeBidiDirection');\r\n\r\nvar invariant = require('./invariant');\r\n\r\nvar UnicodeBidiService = function () {\r\n\r\n  /**\r\n   * Stateful class for paragraph direction detection\r\n   *\r\n   * @param defaultDir  Default direction of the service\r\n   */\r\n  function UnicodeBidiService(defaultDir) {\r\n    _classCallCheck(this, UnicodeBidiService);\r\n\r\n    if (!defaultDir) {\r\n      defaultDir = UnicodeBidiDirection.getGlobalDir();\r\n    } else {\r\n      !UnicodeBidiDirection.isStrong(defaultDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Default direction must be a strong direction (LTR or RTL)') : invariant(false) : void 0;\r\n    }\r\n    this._defaultDir = defaultDir;\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Reset the internal state\r\n   *\r\n   * Instead of creating a new instance, you can just reset() your instance\r\n   * everytime you start a new loop.\r\n   */\r\n\r\n\r\n  UnicodeBidiService.prototype.reset = function reset() {\r\n    this._lastDir = this._defaultDir;\r\n  };\r\n\r\n  /**\r\n   * Returns the direction of a block of text, and remembers it as the\r\n   * fall-back direction for the next paragraph.\r\n   *\r\n   * @param str  A text block, e.g. paragraph, table cell, tag\r\n   * @return     The resolved direction\r\n   */\r\n\r\n\r\n  UnicodeBidiService.prototype.getDirection = function getDirection(str) {\r\n    this._lastDir = UnicodeBidi.getDirection(str, this._lastDir);\r\n    return this._lastDir;\r\n  };\r\n\r\n  return UnicodeBidiService;\r\n}();\r\n\r\nmodule.exports = UnicodeBidiService;"]},"metadata":{},"sourceType":"script"}