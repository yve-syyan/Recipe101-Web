{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lepan\\\\Desktop\\\\CIS550-Project\\\\final project\\\\client\\\\src\\\\components\\\\IngredientOption.js\";\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable react/jsx-props-no-spreading */\n\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n\n/* eslint-disable no-unused-vars */\nimport React from 'react'; // import PropTypes from 'prop-types';\n\nimport Chip from '@material-ui/core/Chip';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Avatar from '@material-ui/core/Avatar'; // import { makeStyles } from '@material-ui/core/styles';\n\nimport TextField from '@material-ui/core/TextField'; // import { withStyles } from '@material-ui/core/styles';\n// import { getTag } from \"./tagFunction\";\n// import { array } from 'prop-types';\n\nimport { fetchIngredient } from \"./getData\";\nimport \"../style/IngredientOption.css\"; // import Chip from '@material-ui/core/Chip';\n// const filter = createFilterOptions();\n// values.forEach((value) => {\n//   const theValue = value;\n//   theValue.pic = fetchIngredient(value.title);\n// }); \n\nconst filter = createFilterOptions(); // const styles = theme => ({\n//   root: {\n//     background: '#8F0005',\n//     border: 2,\n//     borderRadius: 3,\n//     color: 'white',\n//     height: 50,\n//     with: 100\n//   },\n// });\n\nclass IngredientOption extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTagsChange = async (event, values) => {\n      await values.map(async function (entry) {\n        entry.pic = await fetchIngredient(entry.title).then(res => res);\n        return entry;\n      });\n      this.setState({\n        tags: values\n      });\n      const {\n        tags\n      } = this.state;\n      console.log(tags);\n    };\n\n    this.state = {\n      tags: []\n    };\n    this.onTagsChange = this.onTagsChange.bind(this);\n  }\n\n  render() {\n    // const { classes } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: 1000,\n        position: 'relative',\n        left: '50%',\n        top: '10%',\n        transform: 'translate(-50%, 0)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      multiple: true // id=\"tags-outlined\"\n      ,\n      options: top100Films,\n      getOptionLabel: option => option.title // defaultValue={}\n      ,\n      onChange: this.onTagsChange,\n      renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/React.createElement(Chip, Object.assign({\n        style: {\n          backgroundColor: \"#9E4244\",\n          color: \"white\",\n          width: 150,\n          height: 70,\n          fontFamily: \"Patua One\",\n          fontSize: 20\n        },\n        avatar: /*#__PURE__*/React.createElement(Avatar, {\n          style: {\n            width: 50,\n            height: 50\n          },\n          alt: \"Remy Sharp\",\n          src: option.pic,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 139\n          }\n        }),\n        variant: \"outlined\",\n        label: option.title\n      }, getTagProps({\n        index\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }\n      }))),\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params); // Suggest the creation of a new value\n\n        if (params.inputValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            title: `${params.inputValue}`,\n            pic: \"\"\n          });\n        }\n\n        return filtered;\n      },\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        variant: \"outlined\",\n        label: \"Multiple values\",\n        placeholder: \"Favorites\",\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }));\n  }\n\n} // IngredientOption.propTypes = {\n//   classes: PropTypes.func.isRequired,\n// };\n\n\nexport default IngredientOption; // export default withStyles(styles)(IngredientOption);\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\nconst top100Films = [// { title: 'apple', year: 1994, pic: \"\" },\n  // { title: 'The Godfather', year: 1972 },\n  // { title: 'The Godfather: Part II', year: 1974 },\n  // { title: 'The Dark Knight', year: 2008 },\n  // { title: '12 Angry Men', year: 1957 },\n  // { title: \"Schindler's List\", year: 1993 },\n  // { title: 'Pulp Fiction', year: 1994 },\n  // { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n  // { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  // { title: 'Fight Club', year: 1999 },\n  // { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n  // { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n  // { title: 'Forrest Gump', year: 1994 },\n  // { title: 'Inception', year: 2010 },\n  // { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n  // { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  // { title: 'Goodfellas', year: 1990 },\n  // { title: 'The Matrix', year: 1999 },\n  // { title: 'Seven Samurai', year: 1954 },\n  // { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n  // { title: 'City of God', year: 2002 },\n  // { title: 'Se7en', year: 1995 },\n  // { title: 'The Silence of the Lambs', year: 1991 },\n  // { title: \"It's a Wonderful Life\", year: 1946 },\n  // { title: 'Life Is Beautiful', year: 1997 },\n  // { title: 'The Usual Suspects', year: 1995 },\n  // { title: 'Léon: The Professional', year: 1994 },\n  // { title: 'Spirited Away', year: 2001 },\n  // { title: 'Saving Private Ryan', year: 1998 },\n  // { title: 'Once Upon a Time in the West', year: 1968 },\n  // { title: 'American History X', year: 1998 },\n  // { title: 'Interstellar', year: 2014 },\n  // { title: 'Casablanca', year: 1942 },\n  // { title: 'City Lights', year: 1931 },\n  // { title: 'Psycho', year: 1960 },\n  // { title: 'The Green Mile', year: 1999 },\n  // { title: 'The Intouchables', year: 2011 },\n  // { title: 'Modern Times', year: 1936 },\n  // { title: 'Raiders of the Lost Ark', year: 1981 },\n  // { title: 'Rear Window', year: 1954 },\n  // { title: 'The Pianist', year: 2002 },\n  // { title: 'The Departed', year: 2006 },\n  // { title: 'Terminator 2: Judgment Day', year: 1991 },\n  // { title: 'Back to the Future', year: 1985 },\n  // { title: 'Whiplash', year: 2014 },\n  // { title: 'Gladiator', year: 2000 },\n  // { title: 'Memento', year: 2000 },\n  // { title: 'The Prestige', year: 2006 },\n  // { title: 'The Lion King', year: 1994 },\n  // { title: 'Apocalypse Now', year: 1979 },\n  // { title: 'Alien', year: 1979 },\n  // { title: 'Sunset Boulevard', year: 1950 },\n  // {\n  //   title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n  //   year: 1964,\n  // },\n  // { title: 'The Great Dictator', year: 1940 },\n  // { title: 'Cinema Paradiso', year: 1988 },\n  // { title: 'The Lives of Others', year: 2006 },\n  // { title: 'Grave of the Fireflies', year: 1988 },\n  // { title: 'Paths of Glory', year: 1957 },\n  // { title: 'Django Unchained', year: 2012 },\n  // { title: 'The Shining', year: 1980 },\n  // { title: 'WALL·E', year: 2008 },\n  // { title: 'American Beauty', year: 1999 },\n  // { title: 'The Dark Knight Rises', year: 2012 },\n  // { title: 'Princess Mononoke', year: 1997 },\n  // { title: 'Aliens', year: 1986 },\n  // { title: 'Oldboy', year: 2003 },\n  // { title: 'Once Upon a Time in America', year: 1984 },\n  // { title: 'Witness for the Prosecution', year: 1957 },\n  // { title: 'Das Boot', year: 1981 },\n  // { title: 'Citizen Kane', year: 1941 },\n  // { title: 'North by Northwest', year: 1959 },\n  // { title: 'Vertigo', year: 1958 },\n  // { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n  // { title: 'Reservoir Dogs', year: 1992 },\n  // { title: 'Braveheart', year: 1995 },\n  // { title: 'M', year: 1931 },\n  // { title: 'Requiem for a Dream', year: 2000 },\n  // { title: 'Amélie', year: 2001 },\n  // { title: 'A Clockwork Orange', year: 1971 },\n  // { title: 'Like Stars on Earth', year: 2007 },\n  // { title: 'Taxi Driver', year: 1976 },\n  // { title: 'Lawrence of Arabia', year: 1962 },\n  // { title: 'Double Indemnity', year: 1944 },\n  // { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n  // { title: 'Amadeus', year: 1984 },\n  // { title: 'To Kill a Mockingbird', year: 1962 },\n  // { title: 'Toy Story 3', year: 2010 },\n  // { title: 'Logan', year: 2017 },\n  // { title: 'Full Metal Jacket', year: 1987 },\n  // { title: 'Dangal', year: 2016 },\n  // { title: 'The Sting', year: 1973 },\n  // { title: '2001: A Space Odyssey', year: 1968 },\n  // { title: \"Singin' in the Rain\", year: 1952 },\n  // { title: 'Toy Story', year: 1995 },\n  // { title: 'Bicycle Thieves', year: 1948 },\n  // { title: 'The Kid', year: 1921 },\n  // { title: 'Inglourious Basterds', year: 2009 },\n  // { title: 'Snatch', year: 2000 },\n  // { title: '3 Idiots', year: 2009 },\n  // { title: 'Monty Python and the Holy Grail', year: 1975 },\n];","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/src/components/IngredientOption.js"],"names":["React","Chip","Autocomplete","createFilterOptions","Avatar","TextField","fetchIngredient","filter","IngredientOption","Component","constructor","props","onTagsChange","event","values","map","entry","pic","title","then","res","setState","tags","state","console","log","bind","render","width","position","left","top","transform","display","alignItems","justifyContent","top100Films","option","value","getTagProps","index","backgroundColor","color","height","fontFamily","fontSize","options","params","filtered","inputValue","push"],"mappings":"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","sourcesContent":["\r\n/* eslint-disable no-use-before-define */\r\n/* eslint-disable react/jsx-props-no-spreading */\r\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\r\n/* eslint-disable no-unused-vars */\r\nimport React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Autocomplete,{createFilterOptions} from '@material-ui/lab/Autocomplete';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import { withStyles } from '@material-ui/core/styles';\r\n// import { getTag } from \"./tagFunction\";\r\n// import { array } from 'prop-types';\r\nimport {fetchIngredient} from \"./getData\";\r\nimport \"../style/IngredientOption.css\";\r\n// import Chip from '@material-ui/core/Chip';\r\n\r\n// const filter = createFilterOptions();\r\n\r\n    // values.forEach((value) => {\r\n    //   const theValue = value;\r\n    //   theValue.pic = fetchIngredient(value.title);\r\n    // }); \r\nconst filter = createFilterOptions();\r\n\r\n// const styles = theme => ({\r\n//   root: {\r\n//     background: '#8F0005',\r\n//     border: 2,\r\n//     borderRadius: 3,\r\n//     color: 'white',\r\n//     height: 50,\r\n//     with: 100\r\n//   },\r\n// });\r\n\r\nclass IngredientOption extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tags: []\r\n    };\r\n    this.onTagsChange = this.onTagsChange.bind(this);\r\n  }\r\n    \r\n  onTagsChange = async (event, values) => {\r\n    await values.map(async function(entry) {\r\n      entry.pic = await fetchIngredient(entry.title).then((res) => res);\r\n      return entry;\r\n    });\r\n    this.setState({\r\n      tags: values\r\n    });\r\n    const {tags} = this.state;\r\n    console.log(tags);\r\n  }\r\n    \r\n  render() {\r\n    // const { classes } = this.props;\r\n    return (\r\n      <div style={{width:1000, position:'relative', left:'50%', top:'10%', transform: 'translate(-50%, 0)'}}>\r\n        <Autocomplete\r\n          style={{ \r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',}}\r\n          multiple\r\n          // id=\"tags-outlined\"\r\n          options={top100Films}\r\n          getOptionLabel={option => option.title}\r\n          // defaultValue={}\r\n          onChange={this.onTagsChange}\r\n          renderTags={(value, getTagProps) =>\r\n            value.map((option, index) => (\r\n              <Chip style={{backgroundColor:\"#9E4244\", color:\"white\", width:150, height:70, fontFamily:\"Patua One\", fontSize:20}} avatar={<Avatar style={{width:50, height:50}} alt=\"Remy Sharp\" src={option.pic} />} variant=\"outlined\" label={option.title} {...getTagProps({ index })} />\r\n            ))}\r\n          filterOptions={(options, params) => {\r\n            const filtered = filter(options, params);\r\n      \r\n            // Suggest the creation of a new value\r\n            if (params.inputValue !== '') {\r\n              filtered.push({\r\n                inputValue: params.inputValue,\r\n                title: `${params.inputValue}`,\r\n                pic: \"\"\r\n              });\r\n            }\r\n      \r\n            return filtered;\r\n          }}\r\n          renderInput={params => (\r\n            <TextField\r\n              {...params}\r\n              variant=\"outlined\"\r\n              label=\"Multiple values\"\r\n              placeholder=\"Favorites\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// IngredientOption.propTypes = {\r\n//   classes: PropTypes.func.isRequired,\r\n// };\r\nexport default IngredientOption;\r\n// export default withStyles(styles)(IngredientOption);\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  // { title: 'apple', year: 1994, pic: \"\" },\r\n  // { title: 'The Godfather', year: 1972 },\r\n  // { title: 'The Godfather: Part II', year: 1974 },\r\n  // { title: 'The Dark Knight', year: 2008 },\r\n  // { title: '12 Angry Men', year: 1957 },\r\n  // { title: \"Schindler's List\", year: 1993 },\r\n  // { title: 'Pulp Fiction', year: 1994 },\r\n  // { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  // { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  // { title: 'Fight Club', year: 1999 },\r\n  // { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  // { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  // { title: 'Forrest Gump', year: 1994 },\r\n  // { title: 'Inception', year: 2010 },\r\n  // { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  // { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  // { title: 'Goodfellas', year: 1990 },\r\n  // { title: 'The Matrix', year: 1999 },\r\n  // { title: 'Seven Samurai', year: 1954 },\r\n  // { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  // { title: 'City of God', year: 2002 },\r\n  // { title: 'Se7en', year: 1995 },\r\n  // { title: 'The Silence of the Lambs', year: 1991 },\r\n  // { title: \"It's a Wonderful Life\", year: 1946 },\r\n  // { title: 'Life Is Beautiful', year: 1997 },\r\n  // { title: 'The Usual Suspects', year: 1995 },\r\n  // { title: 'Léon: The Professional', year: 1994 },\r\n  // { title: 'Spirited Away', year: 2001 },\r\n  // { title: 'Saving Private Ryan', year: 1998 },\r\n  // { title: 'Once Upon a Time in the West', year: 1968 },\r\n  // { title: 'American History X', year: 1998 },\r\n  // { title: 'Interstellar', year: 2014 },\r\n  // { title: 'Casablanca', year: 1942 },\r\n  // { title: 'City Lights', year: 1931 },\r\n  // { title: 'Psycho', year: 1960 },\r\n  // { title: 'The Green Mile', year: 1999 },\r\n  // { title: 'The Intouchables', year: 2011 },\r\n  // { title: 'Modern Times', year: 1936 },\r\n  // { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  // { title: 'Rear Window', year: 1954 },\r\n  // { title: 'The Pianist', year: 2002 },\r\n  // { title: 'The Departed', year: 2006 },\r\n  // { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  // { title: 'Back to the Future', year: 1985 },\r\n  // { title: 'Whiplash', year: 2014 },\r\n  // { title: 'Gladiator', year: 2000 },\r\n  // { title: 'Memento', year: 2000 },\r\n  // { title: 'The Prestige', year: 2006 },\r\n  // { title: 'The Lion King', year: 1994 },\r\n  // { title: 'Apocalypse Now', year: 1979 },\r\n  // { title: 'Alien', year: 1979 },\r\n  // { title: 'Sunset Boulevard', year: 1950 },\r\n  // {\r\n  //   title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n  //   year: 1964,\r\n  // },\r\n  // { title: 'The Great Dictator', year: 1940 },\r\n  // { title: 'Cinema Paradiso', year: 1988 },\r\n  // { title: 'The Lives of Others', year: 2006 },\r\n  // { title: 'Grave of the Fireflies', year: 1988 },\r\n  // { title: 'Paths of Glory', year: 1957 },\r\n  // { title: 'Django Unchained', year: 2012 },\r\n  // { title: 'The Shining', year: 1980 },\r\n  // { title: 'WALL·E', year: 2008 },\r\n  // { title: 'American Beauty', year: 1999 },\r\n  // { title: 'The Dark Knight Rises', year: 2012 },\r\n  // { title: 'Princess Mononoke', year: 1997 },\r\n  // { title: 'Aliens', year: 1986 },\r\n  // { title: 'Oldboy', year: 2003 },\r\n  // { title: 'Once Upon a Time in America', year: 1984 },\r\n  // { title: 'Witness for the Prosecution', year: 1957 },\r\n  // { title: 'Das Boot', year: 1981 },\r\n  // { title: 'Citizen Kane', year: 1941 },\r\n  // { title: 'North by Northwest', year: 1959 },\r\n  // { title: 'Vertigo', year: 1958 },\r\n  // { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  // { title: 'Reservoir Dogs', year: 1992 },\r\n  // { title: 'Braveheart', year: 1995 },\r\n  // { title: 'M', year: 1931 },\r\n  // { title: 'Requiem for a Dream', year: 2000 },\r\n  // { title: 'Amélie', year: 2001 },\r\n  // { title: 'A Clockwork Orange', year: 1971 },\r\n  // { title: 'Like Stars on Earth', year: 2007 },\r\n  // { title: 'Taxi Driver', year: 1976 },\r\n  // { title: 'Lawrence of Arabia', year: 1962 },\r\n  // { title: 'Double Indemnity', year: 1944 },\r\n  // { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  // { title: 'Amadeus', year: 1984 },\r\n  // { title: 'To Kill a Mockingbird', year: 1962 },\r\n  // { title: 'Toy Story 3', year: 2010 },\r\n  // { title: 'Logan', year: 2017 },\r\n  // { title: 'Full Metal Jacket', year: 1987 },\r\n  // { title: 'Dangal', year: 2016 },\r\n  // { title: 'The Sting', year: 1973 },\r\n  // { title: '2001: A Space Odyssey', year: 1968 },\r\n  // { title: \"Singin' in the Rain\", year: 1952 },\r\n  // { title: 'Toy Story', year: 1995 },\r\n  // { title: 'Bicycle Thieves', year: 1948 },\r\n  // { title: 'The Kid', year: 1921 },\r\n  // { title: 'Inglourious Basterds', year: 2009 },\r\n  // { title: 'Snatch', year: 2000 },\r\n  // { title: '3 Idiots', year: 2009 },\r\n  // { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}