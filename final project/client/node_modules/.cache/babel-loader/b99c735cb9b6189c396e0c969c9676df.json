{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule editOnInput\r\n * @format\r\n * \r\n */\n'use strict';\n\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\n\nvar DraftModifier = require('./DraftModifier');\n\nvar DraftOffsetKey = require('./DraftOffsetKey');\n\nvar EditorState = require('./EditorState');\n\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar findAncestorOffsetKey = require('./findAncestorOffsetKey');\n\nvar nullthrows = require('fbjs/lib/nullthrows');\n\nvar isGecko = UserAgent.isEngine('Gecko');\nvar DOUBLE_NEWLINE = '\\n\\n';\n/**\r\n * This function is intended to handle spellcheck and autocorrect changes,\r\n * which occur in the DOM natively without any opportunity to observe or\r\n * interpret the changes before they occur.\r\n *\r\n * The `input` event fires in contentEditable elements reliably for non-IE\r\n * browsers, immediately after changes occur to the editor DOM. Since our other\r\n * handlers override or otherwise handle cover other varieties of text input,\r\n * the DOM state should match the model in all controlled input cases. Thus,\r\n * when an `input` change leads to a DOM/model mismatch, the change should be\r\n * due to a spellcheck change, and we can incorporate it into our model.\r\n */\n\nfunction editOnInput(editor) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n\n  var domSelection = global.getSelection();\n  var anchorNode = domSelection.anchorNode,\n      isCollapsed = domSelection.isCollapsed;\n  var isNotTextNode = anchorNode.nodeType !== Node.TEXT_NODE;\n  var isNotTextOrElementNode = anchorNode.nodeType !== Node.TEXT_NODE && anchorNode.nodeType !== Node.ELEMENT_NODE;\n\n  if (DraftFeatureFlags.draft_killswitch_allow_nontextnodes) {\n    if (isNotTextNode) {\n      return;\n    }\n  } else {\n    if (isNotTextOrElementNode) {\n      // TODO: (t16149272) figure out context for this change\n      return;\n    }\n  }\n\n  if (anchorNode.nodeType === Node.TEXT_NODE && (anchorNode.previousSibling !== null || anchorNode.nextSibling !== null)) {\n    // When typing at the beginning of a visual line, Chrome splits the text\n    // nodes into two. Why? No one knows. This commit is suspicious:\n    // https://chromium.googlesource.com/chromium/src/+/a3b600981286b135632371477f902214c55a1724\n    // To work around, we'll merge the sibling text nodes back into this one.\n    var span = anchorNode.parentNode;\n    anchorNode.nodeValue = span.textContent;\n\n    for (var child = span.firstChild; child !== null; child = child.nextSibling) {\n      if (child !== anchorNode) {\n        span.removeChild(child);\n      }\n    }\n  }\n\n  var domText = anchorNode.textContent;\n  var editorState = editor._latestEditorState;\n  var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));\n\n  var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),\n      blockKey = _DraftOffsetKey$decod.blockKey,\n      decoratorKey = _DraftOffsetKey$decod.decoratorKey,\n      leafKey = _DraftOffsetKey$decod.leafKey;\n\n  var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),\n      start = _editorState$getBlock.start,\n      end = _editorState$getBlock.end;\n\n  var content = editorState.getCurrentContent();\n  var block = content.getBlockForKey(blockKey);\n  var modelText = block.getText().slice(start, end); // Special-case soft newlines here. If the DOM text ends in a soft newline,\n  // we will have manually inserted an extra soft newline in DraftEditorLeaf.\n  // We want to remove this extra newline for the purpose of our comparison\n  // of DOM and model text.\n\n  if (domText.endsWith(DOUBLE_NEWLINE)) {\n    domText = domText.slice(0, -1);\n  } // No change -- the DOM is up to date. Nothing to do here.\n\n\n  if (domText === modelText) {\n    // This can be buggy for some Android keyboards because they don't fire\n    // standard onkeydown/pressed events and only fired editOnInput\n    // so domText is already changed by the browser and ends up being equal\n    // to modelText unexpectedly\n    return;\n  }\n\n  var selection = editorState.getSelection(); // We'll replace the entire leaf with the text content of the target.\n\n  var targetRange = selection.merge({\n    anchorOffset: start,\n    focusOffset: end,\n    isBackward: false\n  });\n  var entityKey = block.getEntityAt(start);\n  var entity = entityKey && content.getEntity(entityKey);\n  var entityType = entity && entity.getMutability();\n  var preserveEntity = entityType === 'MUTABLE'; // Immutable or segmented entities cannot properly be handled by the\n  // default browser undo, so we have to use a different change type to\n  // force using our internal undo method instead of falling through to the\n  // native browser undo.\n\n  var changeType = preserveEntity ? 'spellcheck-change' : 'apply-entity';\n  var newContent = DraftModifier.replaceText(content, targetRange, domText, block.getInlineStyleAt(start), preserveEntity ? block.getEntityAt(start) : null);\n  var anchorOffset, focusOffset, startOffset, endOffset;\n\n  if (isGecko) {\n    // Firefox selection does not change while the context menu is open, so\n    // we preserve the anchor and focus values of the DOM selection.\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    startOffset = start + Math.min(anchorOffset, focusOffset);\n    endOffset = startOffset + Math.abs(anchorOffset - focusOffset);\n    anchorOffset = startOffset;\n    focusOffset = endOffset;\n  } else {\n    // Browsers other than Firefox may adjust DOM selection while the context\n    // menu is open, and Safari autocorrect is prone to providing an inaccurate\n    // DOM selection. Don't trust it. Instead, use our existing SelectionState\n    // and adjust it based on the number of characters changed during the\n    // mutation.\n    var charDelta = domText.length - modelText.length;\n    startOffset = selection.getStartOffset();\n    endOffset = selection.getEndOffset();\n    anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;\n    focusOffset = endOffset + charDelta;\n  } // Segmented entities are completely or partially removed when their\n  // text content changes. For this case we do not want any text to be selected\n  // after the change, so we are not merging the selection.\n\n\n  var contentWithAdjustedDOMSelection = newContent.merge({\n    selectionBefore: content.getSelectionAfter(),\n    selectionAfter: selection.merge({\n      anchorOffset: anchorOffset,\n      focusOffset: focusOffset\n    })\n  });\n  editor.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));\n}\n\nmodule.exports = editOnInput;","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/node_modules/draft-js/lib/editOnInput.js"],"names":["DraftFeatureFlags","require","DraftModifier","DraftOffsetKey","EditorState","UserAgent","findAncestorOffsetKey","nullthrows","isGecko","isEngine","DOUBLE_NEWLINE","editOnInput","editor","_pendingStateFromBeforeInput","undefined","update","domSelection","global","getSelection","anchorNode","isCollapsed","isNotTextNode","nodeType","Node","TEXT_NODE","isNotTextOrElementNode","ELEMENT_NODE","draft_killswitch_allow_nontextnodes","previousSibling","nextSibling","span","parentNode","nodeValue","textContent","child","firstChild","removeChild","domText","editorState","_latestEditorState","offsetKey","_DraftOffsetKey$decod","decode","blockKey","decoratorKey","leafKey","_editorState$getBlock","getBlockTree","getIn","start","end","content","getCurrentContent","block","getBlockForKey","modelText","getText","slice","endsWith","selection","targetRange","merge","anchorOffset","focusOffset","isBackward","entityKey","getEntityAt","entity","getEntity","entityType","getMutability","preserveEntity","changeType","newContent","replaceText","getInlineStyleAt","startOffset","endOffset","Math","min","abs","charDelta","length","getStartOffset","getEndOffset","contentWithAdjustedDOMSelection","selectionBefore","getSelectionAfter","selectionAfter","push","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule editOnInput\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\r\nvar DraftModifier = require('./DraftModifier');\r\nvar DraftOffsetKey = require('./DraftOffsetKey');\r\nvar EditorState = require('./EditorState');\r\nvar UserAgent = require('fbjs/lib/UserAgent');\r\n\r\nvar findAncestorOffsetKey = require('./findAncestorOffsetKey');\r\nvar nullthrows = require('fbjs/lib/nullthrows');\r\n\r\nvar isGecko = UserAgent.isEngine('Gecko');\r\n\r\nvar DOUBLE_NEWLINE = '\\n\\n';\r\n\r\n/**\r\n * This function is intended to handle spellcheck and autocorrect changes,\r\n * which occur in the DOM natively without any opportunity to observe or\r\n * interpret the changes before they occur.\r\n *\r\n * The `input` event fires in contentEditable elements reliably for non-IE\r\n * browsers, immediately after changes occur to the editor DOM. Since our other\r\n * handlers override or otherwise handle cover other varieties of text input,\r\n * the DOM state should match the model in all controlled input cases. Thus,\r\n * when an `input` change leads to a DOM/model mismatch, the change should be\r\n * due to a spellcheck change, and we can incorporate it into our model.\r\n */\r\nfunction editOnInput(editor) {\r\n  if (editor._pendingStateFromBeforeInput !== undefined) {\r\n    editor.update(editor._pendingStateFromBeforeInput);\r\n    editor._pendingStateFromBeforeInput = undefined;\r\n  }\r\n\r\n  var domSelection = global.getSelection();\r\n\r\n  var anchorNode = domSelection.anchorNode,\r\n      isCollapsed = domSelection.isCollapsed;\r\n\r\n  var isNotTextNode = anchorNode.nodeType !== Node.TEXT_NODE;\r\n  var isNotTextOrElementNode = anchorNode.nodeType !== Node.TEXT_NODE && anchorNode.nodeType !== Node.ELEMENT_NODE;\r\n\r\n  if (DraftFeatureFlags.draft_killswitch_allow_nontextnodes) {\r\n    if (isNotTextNode) {\r\n      return;\r\n    }\r\n  } else {\r\n    if (isNotTextOrElementNode) {\r\n      // TODO: (t16149272) figure out context for this change\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (anchorNode.nodeType === Node.TEXT_NODE && (anchorNode.previousSibling !== null || anchorNode.nextSibling !== null)) {\r\n    // When typing at the beginning of a visual line, Chrome splits the text\r\n    // nodes into two. Why? No one knows. This commit is suspicious:\r\n    // https://chromium.googlesource.com/chromium/src/+/a3b600981286b135632371477f902214c55a1724\r\n    // To work around, we'll merge the sibling text nodes back into this one.\r\n    var span = anchorNode.parentNode;\r\n    anchorNode.nodeValue = span.textContent;\r\n    for (var child = span.firstChild; child !== null; child = child.nextSibling) {\r\n      if (child !== anchorNode) {\r\n        span.removeChild(child);\r\n      }\r\n    }\r\n  }\r\n\r\n  var domText = anchorNode.textContent;\r\n  var editorState = editor._latestEditorState;\r\n  var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));\r\n\r\n  var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey),\r\n      blockKey = _DraftOffsetKey$decod.blockKey,\r\n      decoratorKey = _DraftOffsetKey$decod.decoratorKey,\r\n      leafKey = _DraftOffsetKey$decod.leafKey;\r\n\r\n  var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]),\r\n      start = _editorState$getBlock.start,\r\n      end = _editorState$getBlock.end;\r\n\r\n  var content = editorState.getCurrentContent();\r\n  var block = content.getBlockForKey(blockKey);\r\n  var modelText = block.getText().slice(start, end);\r\n\r\n  // Special-case soft newlines here. If the DOM text ends in a soft newline,\r\n  // we will have manually inserted an extra soft newline in DraftEditorLeaf.\r\n  // We want to remove this extra newline for the purpose of our comparison\r\n  // of DOM and model text.\r\n  if (domText.endsWith(DOUBLE_NEWLINE)) {\r\n    domText = domText.slice(0, -1);\r\n  }\r\n\r\n  // No change -- the DOM is up to date. Nothing to do here.\r\n  if (domText === modelText) {\r\n    // This can be buggy for some Android keyboards because they don't fire\r\n    // standard onkeydown/pressed events and only fired editOnInput\r\n    // so domText is already changed by the browser and ends up being equal\r\n    // to modelText unexpectedly\r\n    return;\r\n  }\r\n\r\n  var selection = editorState.getSelection();\r\n\r\n  // We'll replace the entire leaf with the text content of the target.\r\n  var targetRange = selection.merge({\r\n    anchorOffset: start,\r\n    focusOffset: end,\r\n    isBackward: false\r\n  });\r\n\r\n  var entityKey = block.getEntityAt(start);\r\n  var entity = entityKey && content.getEntity(entityKey);\r\n  var entityType = entity && entity.getMutability();\r\n  var preserveEntity = entityType === 'MUTABLE';\r\n\r\n  // Immutable or segmented entities cannot properly be handled by the\r\n  // default browser undo, so we have to use a different change type to\r\n  // force using our internal undo method instead of falling through to the\r\n  // native browser undo.\r\n  var changeType = preserveEntity ? 'spellcheck-change' : 'apply-entity';\r\n\r\n  var newContent = DraftModifier.replaceText(content, targetRange, domText, block.getInlineStyleAt(start), preserveEntity ? block.getEntityAt(start) : null);\r\n\r\n  var anchorOffset, focusOffset, startOffset, endOffset;\r\n\r\n  if (isGecko) {\r\n    // Firefox selection does not change while the context menu is open, so\r\n    // we preserve the anchor and focus values of the DOM selection.\r\n    anchorOffset = domSelection.anchorOffset;\r\n    focusOffset = domSelection.focusOffset;\r\n    startOffset = start + Math.min(anchorOffset, focusOffset);\r\n    endOffset = startOffset + Math.abs(anchorOffset - focusOffset);\r\n    anchorOffset = startOffset;\r\n    focusOffset = endOffset;\r\n  } else {\r\n    // Browsers other than Firefox may adjust DOM selection while the context\r\n    // menu is open, and Safari autocorrect is prone to providing an inaccurate\r\n    // DOM selection. Don't trust it. Instead, use our existing SelectionState\r\n    // and adjust it based on the number of characters changed during the\r\n    // mutation.\r\n    var charDelta = domText.length - modelText.length;\r\n    startOffset = selection.getStartOffset();\r\n    endOffset = selection.getEndOffset();\r\n\r\n    anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;\r\n    focusOffset = endOffset + charDelta;\r\n  }\r\n\r\n  // Segmented entities are completely or partially removed when their\r\n  // text content changes. For this case we do not want any text to be selected\r\n  // after the change, so we are not merging the selection.\r\n  var contentWithAdjustedDOMSelection = newContent.merge({\r\n    selectionBefore: content.getSelectionAfter(),\r\n    selectionAfter: selection.merge({ anchorOffset: anchorOffset, focusOffset: focusOffset })\r\n  });\r\n\r\n  editor.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));\r\n}\r\n\r\nmodule.exports = editOnInput;"]},"metadata":{},"sourceType":"script"}