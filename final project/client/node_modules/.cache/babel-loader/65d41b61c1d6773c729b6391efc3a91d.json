{"ast":null,"code":"/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule CompositeDraftDecorator\r\n * @format\r\n * \r\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Immutable = require('immutable');\n\nvar List = Immutable.List;\nvar DELIMITER = '.';\n/**\r\n * A CompositeDraftDecorator traverses through a list of DraftDecorator\r\n * instances to identify sections of a ContentBlock that should be rendered\r\n * in a \"decorated\" manner. For example, hashtags, mentions, and links may\r\n * be intended to stand out visually, be rendered as anchors, etc.\r\n *\r\n * The list of decorators supplied to the constructor will be used in the\r\n * order they are provided. This allows the caller to specify a priority for\r\n * string matching, in case of match collisions among decorators.\r\n *\r\n * For instance, I may have a link with a `#` in its text. Though this section\r\n * of text may match our hashtag decorator, it should not be treated as a\r\n * hashtag. I should therefore list my link DraftDecorator\r\n * before my hashtag DraftDecorator when constructing this composite\r\n * decorator instance.\r\n *\r\n * Thus, when a collision like this is encountered, the earlier match is\r\n * preserved and the new match is discarded.\r\n */\n\nvar CompositeDraftDecorator = function () {\n  function CompositeDraftDecorator(decorators) {\n    _classCallCheck(this, CompositeDraftDecorator); // Copy the decorator array, since we use this array order to determine\n    // precedence of decoration matching. If the array is mutated externally,\n    // we don't want to be affected here.\n\n\n    this._decorators = decorators.slice();\n  }\n\n  CompositeDraftDecorator.prototype.getDecorations = function getDecorations(block, contentState) {\n    var decorations = Array(block.getText().length).fill(null);\n\n    this._decorators.forEach(function (\n    /*object*/\n    decorator,\n    /*number*/\n    ii) {\n      var counter = 0;\n      var strategy = decorator.strategy;\n\n      var callback = function callback(\n      /*number*/\n      start,\n      /*number*/\n      end) {\n        // Find out if any of our matching range is already occupied\n        // by another decorator. If so, discard the match. Otherwise, store\n        // the component key for rendering.\n        if (canOccupySlice(decorations, start, end)) {\n          occupySlice(decorations, start, end, ii + DELIMITER + counter);\n          counter++;\n        }\n      };\n\n      strategy(block, callback, contentState);\n    });\n\n    return List(decorations);\n  };\n\n  CompositeDraftDecorator.prototype.getComponentForKey = function getComponentForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].component;\n  };\n\n  CompositeDraftDecorator.prototype.getPropsForKey = function getPropsForKey(key) {\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n    return this._decorators[componentKey].props;\n  };\n\n  return CompositeDraftDecorator;\n}();\n/**\r\n * Determine whether we can occupy the specified slice of the decorations\r\n * array.\r\n */\n\n\nfunction canOccupySlice(decorations, start, end) {\n  for (var ii = start; ii < end; ii++) {\n    if (decorations[ii] != null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * Splice the specified component into our decoration array at the desired\r\n * range.\r\n */\n\n\nfunction occupySlice(targetArr, start, end, componentKey) {\n  for (var ii = start; ii < end; ii++) {\n    targetArr[ii] = componentKey;\n  }\n}\n\nmodule.exports = CompositeDraftDecorator;","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/node_modules/draft-js/lib/CompositeDraftDecorator.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Immutable","require","List","DELIMITER","CompositeDraftDecorator","decorators","_decorators","slice","prototype","getDecorations","block","contentState","decorations","Array","getText","length","fill","forEach","decorator","ii","counter","strategy","callback","start","end","canOccupySlice","occupySlice","getComponentForKey","key","componentKey","parseInt","split","component","getPropsForKey","props","targetArr","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule CompositeDraftDecorator\r\n * @format\r\n * \r\n */\r\n\r\n'use strict';\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nvar Immutable = require('immutable');\r\n\r\nvar List = Immutable.List;\r\n\r\n\r\nvar DELIMITER = '.';\r\n\r\n/**\r\n * A CompositeDraftDecorator traverses through a list of DraftDecorator\r\n * instances to identify sections of a ContentBlock that should be rendered\r\n * in a \"decorated\" manner. For example, hashtags, mentions, and links may\r\n * be intended to stand out visually, be rendered as anchors, etc.\r\n *\r\n * The list of decorators supplied to the constructor will be used in the\r\n * order they are provided. This allows the caller to specify a priority for\r\n * string matching, in case of match collisions among decorators.\r\n *\r\n * For instance, I may have a link with a `#` in its text. Though this section\r\n * of text may match our hashtag decorator, it should not be treated as a\r\n * hashtag. I should therefore list my link DraftDecorator\r\n * before my hashtag DraftDecorator when constructing this composite\r\n * decorator instance.\r\n *\r\n * Thus, when a collision like this is encountered, the earlier match is\r\n * preserved and the new match is discarded.\r\n */\r\n\r\nvar CompositeDraftDecorator = function () {\r\n  function CompositeDraftDecorator(decorators) {\r\n    _classCallCheck(this, CompositeDraftDecorator);\r\n\r\n    // Copy the decorator array, since we use this array order to determine\r\n    // precedence of decoration matching. If the array is mutated externally,\r\n    // we don't want to be affected here.\r\n    this._decorators = decorators.slice();\r\n  }\r\n\r\n  CompositeDraftDecorator.prototype.getDecorations = function getDecorations(block, contentState) {\r\n    var decorations = Array(block.getText().length).fill(null);\r\n\r\n    this._decorators.forEach(function ( /*object*/decorator, /*number*/ii) {\r\n      var counter = 0;\r\n      var strategy = decorator.strategy;\r\n      var callback = function callback( /*number*/start, /*number*/end) {\r\n        // Find out if any of our matching range is already occupied\r\n        // by another decorator. If so, discard the match. Otherwise, store\r\n        // the component key for rendering.\r\n        if (canOccupySlice(decorations, start, end)) {\r\n          occupySlice(decorations, start, end, ii + DELIMITER + counter);\r\n          counter++;\r\n        }\r\n      };\r\n      strategy(block, callback, contentState);\r\n    });\r\n\r\n    return List(decorations);\r\n  };\r\n\r\n  CompositeDraftDecorator.prototype.getComponentForKey = function getComponentForKey(key) {\r\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\r\n    return this._decorators[componentKey].component;\r\n  };\r\n\r\n  CompositeDraftDecorator.prototype.getPropsForKey = function getPropsForKey(key) {\r\n    var componentKey = parseInt(key.split(DELIMITER)[0], 10);\r\n    return this._decorators[componentKey].props;\r\n  };\r\n\r\n  return CompositeDraftDecorator;\r\n}();\r\n\r\n/**\r\n * Determine whether we can occupy the specified slice of the decorations\r\n * array.\r\n */\r\n\r\n\r\nfunction canOccupySlice(decorations, start, end) {\r\n  for (var ii = start; ii < end; ii++) {\r\n    if (decorations[ii] != null) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Splice the specified component into our decoration array at the desired\r\n * range.\r\n */\r\nfunction occupySlice(targetArr, start, end, componentKey) {\r\n  for (var ii = start; ii < end; ii++) {\r\n    targetArr[ii] = componentKey;\r\n  }\r\n}\r\n\r\nmodule.exports = CompositeDraftDecorator;"]},"metadata":{},"sourceType":"script"}