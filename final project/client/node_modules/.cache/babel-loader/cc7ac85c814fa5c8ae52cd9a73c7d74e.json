{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lepan\\\\Desktop\\\\CIS550-Project\\\\final project\\\\client\\\\src\\\\components\\\\RecipeList.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)'\n  },\n  title: {\n    color: theme.palette.primary.light\n  },\n  titleBar: {\n    background: 'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)'\n  }\n}));\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const tileData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\n\nfunction RecipeList(props) {\n  _s();\n\n  const classes = useStyles();\n  const recipeMap = props.recipeInfo;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GridList, {\n    className: classes.gridList,\n    cols: 2.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, recipeMap.map(recipe => /*#__PURE__*/React.createElement(GridListTile, {\n    key: recipe.RecipeID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: recipe.RecipePhoto,\n    alt: recipe.RecipeName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(GridListTileBar, {\n    title: recipe.RecipeName,\n    classes: {\n      root: classes.titleBar,\n      title: classes.title\n    },\n    actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": `star ${recipe.RecipeName}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(StarBorderIcon, {\n      className: classes.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  })))));\n}\n\n_s(RecipeList, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = RecipeList;\nRecipeList.propTypes = {\n  RecipeInfo: PropTypes.array.isRequired\n};\nexport default RecipeList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeList\");","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/src/components/RecipeList.js"],"names":["React","makeStyles","GridList","GridListTile","GridListTileBar","IconButton","StarBorderIcon","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","transform","title","color","primary","light","titleBar","RecipeList","props","classes","recipeMap","recipeInfo","map","recipe","RecipeID","RecipePhoto","RecipeName","propTypes","RecipeInfo","PropTypes","array","isRequired"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAAEO,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,QAAQ,EAAE,MAFN;AAGJC,IAAAA,cAAc,EAAE,cAHZ;AAIJC,IAAAA,QAAQ,EAAE,QAJN;AAKJC,IAAAA,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBC;AALtC,GADiC;AAQvCC,EAAAA,QAAQ,EAAE;AACRP,IAAAA,QAAQ,EAAE,QADF;AAER;AACAQ,IAAAA,SAAS,EAAE;AAHH,GAR6B;AAavCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAEb,KAAK,CAACO,OAAN,CAAcO,OAAd,CAAsBC;AADxB,GAbgC;AAgBvCC,EAAAA,QAAQ,EAAE;AACRR,IAAAA,UAAU,EACR;AAFM;AAhB6B,CAAZ,CAAD,CAA5B;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASS,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACzB,QAAMC,OAAO,GAAGpB,SAAS,EAAzB;AACA,QAAMqB,SAAS,GAAGF,KAAK,CAACG,UAAxB;AACA,sBACE;AAAK,IAAA,SAAS,EAAEF,OAAO,CAAClB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAEkB,OAAO,CAACT,QAA7B;AAAuC,IAAA,IAAI,EAAE,GAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,SAAS,CAACE,GAAV,CAAeC,MAAD,iBACb,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAEA,MAAM,CAACC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAED,MAAM,CAACE,WAAjB;AAA8B,IAAA,GAAG,EAAEF,MAAM,CAACG,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,eAAD;AACE,IAAA,KAAK,EAAEH,MAAM,CAACG,UADhB;AAEE,IAAA,OAAO,EAAE;AACPzB,MAAAA,IAAI,EAAEkB,OAAO,CAACH,QADP;AAEPJ,MAAAA,KAAK,EAAEO,OAAO,CAACP;AAFR,KAFX;AAME,IAAA,UAAU,eACR,oBAAC,UAAD;AAAY,oBAAa,QAAOW,MAAM,CAACG,UAAW,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAEP,OAAO,CAACP,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADD,CADH,CADF,CADF;AAuBD;;GA1BQK,U;UACSlB,S;;;KADTkB,U;AA4BTA,UAAU,CAACU,SAAX,GAAuB;AACnBC,EAAAA,UAAU,EAAEC,SAAS,CAACC,KAAV,CAAgBC;AADT,CAAvB;AAIA,eAAed,UAAf","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n  },\r\n  title: {\r\n    color: theme.palette.primary.light,\r\n  },\r\n  titleBar: {\r\n    background:\r\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n  },\r\n}));\r\n\r\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const tileData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\r\n\r\nfunction RecipeList(props) {\r\n  const classes = useStyles();\r\n  const recipeMap = props.recipeInfo;\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList className={classes.gridList} cols={2.5}>\r\n        {recipeMap.map((recipe) => (\r\n          <GridListTile key={recipe.RecipeID}>\r\n            <img src={recipe.RecipePhoto} alt={recipe.RecipeName} />\r\n            <GridListTileBar\r\n              title={recipe.RecipeName}\r\n              classes={{\r\n                root: classes.titleBar,\r\n                title: classes.title,\r\n              }}\r\n              actionIcon={\r\n                <IconButton aria-label={`star ${recipe.RecipeName}`}>\r\n                  <StarBorderIcon className={classes.title} />\r\n                </IconButton>\r\n              }\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n\r\nRecipeList.propTypes = {\r\n    RecipeInfo: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default RecipeList;"]},"metadata":{},"sourceType":"module"}