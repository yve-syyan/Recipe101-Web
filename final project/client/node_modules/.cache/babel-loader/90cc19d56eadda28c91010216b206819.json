{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lepan\\\\Desktop\\\\CIS550-Project\\\\final project\\\\client\\\\src\\\\components\\\\IngredientOption.js\";\n\n/* eslint-disable no-use-before-define */\n\n/* eslint-disable react/jsx-props-no-spreading */\n\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport React from 'react';\nimport Chip from '@material-ui/core/Chip';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Avatar from '@material-ui/core/Avatar'; // import { makeStyles } from '@material-ui/core/styles';\n\nimport TextField from '@material-ui/core/TextField'; // import { getTag } from \"./tagFunction\";\n// import { array } from 'prop-types';\n\nimport { fetchIngredient } from \"./getData\"; // import Chip from '@material-ui/core/Chip';\n// const filter = createFilterOptions();\n// values.forEach((value) => {\n//   const theValue = value;\n//   theValue.pic = fetchIngredient(value.title);\n// }); \n\nconst filter = createFilterOptions();\nexport default class IngredientOption extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTagsChange = (event, values) => {\n      values.map(async function (entry) {\n        entry.pic = await fetchIngredient(entry.title).then(res => res);\n        return entry;\n      });\n      this.setState({\n        tags: values\n      });\n      const {\n        tags\n      } = this.state;\n      console.log(tags);\n    };\n\n    this.state = {\n      tags: []\n    };\n    this.onTagsChange = this.onTagsChange.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: 1000\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      multiple: true // id=\"tags-outlined\"\n      ,\n      options: top100Films,\n      getOptionLabel: option => option.title.substring(4, option.title.length()) // defaultValue={}\n      ,\n      onChange: this.onTagsChange,\n      renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/React.createElement(Chip, Object.assign({\n        avatar: /*#__PURE__*/React.createElement(Avatar, {\n          alt: \"Remy Sharp\",\n          src: option.pic,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }\n        }),\n        variant: \"outlined\",\n        label: option.title.substring(4, option.title.length())\n      }, getTagProps({\n        index\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }\n      }))),\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params); // Suggest the creation of a new value\n\n        if (params.inputValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            title: `Add \"${params.inputValue}\"`,\n            pic: \"\"\n          });\n        }\n\n        return filtered;\n      },\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        variant: \"outlined\",\n        label: \"Multiple values\",\n        placeholder: \"Favorites\",\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }));\n  }\n\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\nconst top100Films = [{\n  title: 'apple',\n  year: 1994,\n  pic: \"\"\n} // { title: 'The Godfather', year: 1972 },\n// { title: 'The Godfather: Part II', year: 1974 },\n// { title: 'The Dark Knight', year: 2008 },\n// { title: '12 Angry Men', year: 1957 },\n// { title: \"Schindler's List\", year: 1993 },\n// { title: 'Pulp Fiction', year: 1994 },\n// { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n// { title: 'The Good, the Bad and the Ugly', year: 1966 },\n// { title: 'Fight Club', year: 1999 },\n// { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n// { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n// { title: 'Forrest Gump', year: 1994 },\n// { title: 'Inception', year: 2010 },\n// { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n// { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n// { title: 'Goodfellas', year: 1990 },\n// { title: 'The Matrix', year: 1999 },\n// { title: 'Seven Samurai', year: 1954 },\n// { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n// { title: 'City of God', year: 2002 },\n// { title: 'Se7en', year: 1995 },\n// { title: 'The Silence of the Lambs', year: 1991 },\n// { title: \"It's a Wonderful Life\", year: 1946 },\n// { title: 'Life Is Beautiful', year: 1997 },\n// { title: 'The Usual Suspects', year: 1995 },\n// { title: 'Léon: The Professional', year: 1994 },\n// { title: 'Spirited Away', year: 2001 },\n// { title: 'Saving Private Ryan', year: 1998 },\n// { title: 'Once Upon a Time in the West', year: 1968 },\n// { title: 'American History X', year: 1998 },\n// { title: 'Interstellar', year: 2014 },\n// { title: 'Casablanca', year: 1942 },\n// { title: 'City Lights', year: 1931 },\n// { title: 'Psycho', year: 1960 },\n// { title: 'The Green Mile', year: 1999 },\n// { title: 'The Intouchables', year: 2011 },\n// { title: 'Modern Times', year: 1936 },\n// { title: 'Raiders of the Lost Ark', year: 1981 },\n// { title: 'Rear Window', year: 1954 },\n// { title: 'The Pianist', year: 2002 },\n// { title: 'The Departed', year: 2006 },\n// { title: 'Terminator 2: Judgment Day', year: 1991 },\n// { title: 'Back to the Future', year: 1985 },\n// { title: 'Whiplash', year: 2014 },\n// { title: 'Gladiator', year: 2000 },\n// { title: 'Memento', year: 2000 },\n// { title: 'The Prestige', year: 2006 },\n// { title: 'The Lion King', year: 1994 },\n// { title: 'Apocalypse Now', year: 1979 },\n// { title: 'Alien', year: 1979 },\n// { title: 'Sunset Boulevard', year: 1950 },\n// {\n//   title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n//   year: 1964,\n// },\n// { title: 'The Great Dictator', year: 1940 },\n// { title: 'Cinema Paradiso', year: 1988 },\n// { title: 'The Lives of Others', year: 2006 },\n// { title: 'Grave of the Fireflies', year: 1988 },\n// { title: 'Paths of Glory', year: 1957 },\n// { title: 'Django Unchained', year: 2012 },\n// { title: 'The Shining', year: 1980 },\n// { title: 'WALL·E', year: 2008 },\n// { title: 'American Beauty', year: 1999 },\n// { title: 'The Dark Knight Rises', year: 2012 },\n// { title: 'Princess Mononoke', year: 1997 },\n// { title: 'Aliens', year: 1986 },\n// { title: 'Oldboy', year: 2003 },\n// { title: 'Once Upon a Time in America', year: 1984 },\n// { title: 'Witness for the Prosecution', year: 1957 },\n// { title: 'Das Boot', year: 1981 },\n// { title: 'Citizen Kane', year: 1941 },\n// { title: 'North by Northwest', year: 1959 },\n// { title: 'Vertigo', year: 1958 },\n// { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n// { title: 'Reservoir Dogs', year: 1992 },\n// { title: 'Braveheart', year: 1995 },\n// { title: 'M', year: 1931 },\n// { title: 'Requiem for a Dream', year: 2000 },\n// { title: 'Amélie', year: 2001 },\n// { title: 'A Clockwork Orange', year: 1971 },\n// { title: 'Like Stars on Earth', year: 2007 },\n// { title: 'Taxi Driver', year: 1976 },\n// { title: 'Lawrence of Arabia', year: 1962 },\n// { title: 'Double Indemnity', year: 1944 },\n// { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n// { title: 'Amadeus', year: 1984 },\n// { title: 'To Kill a Mockingbird', year: 1962 },\n// { title: 'Toy Story 3', year: 2010 },\n// { title: 'Logan', year: 2017 },\n// { title: 'Full Metal Jacket', year: 1987 },\n// { title: 'Dangal', year: 2016 },\n// { title: 'The Sting', year: 1973 },\n// { title: '2001: A Space Odyssey', year: 1968 },\n// { title: \"Singin' in the Rain\", year: 1952 },\n// { title: 'Toy Story', year: 1995 },\n// { title: 'Bicycle Thieves', year: 1948 },\n// { title: 'The Kid', year: 1921 },\n// { title: 'Inglourious Basterds', year: 2009 },\n// { title: 'Snatch', year: 2000 },\n// { title: '3 Idiots', year: 2009 },\n// { title: 'Monty Python and the Holy Grail', year: 1975 },\n];","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/src/components/IngredientOption.js"],"names":["React","Chip","Autocomplete","createFilterOptions","Avatar","TextField","fetchIngredient","filter","IngredientOption","Component","constructor","props","onTagsChange","event","values","map","entry","pic","title","then","res","setState","tags","state","console","log","bind","render","width","top100Films","option","substring","length","value","getTagProps","index","options","params","filtered","inputValue","push","year"],"mappings":"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","sourcesContent":["\r\n/* eslint-disable no-use-before-define */\r\n/* eslint-disable react/jsx-props-no-spreading */\r\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\r\nimport React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Autocomplete,{createFilterOptions} from '@material-ui/lab/Autocomplete';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import { getTag } from \"./tagFunction\";\r\n// import { array } from 'prop-types';\r\nimport {fetchIngredient} from \"./getData\";\r\n// import Chip from '@material-ui/core/Chip';\r\n\r\n// const filter = createFilterOptions();\r\n\r\n    // values.forEach((value) => {\r\n    //   const theValue = value;\r\n    //   theValue.pic = fetchIngredient(value.title);\r\n    // }); \r\nconst filter = createFilterOptions();\r\n\r\nexport default class IngredientOption extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tags: []\r\n    };\r\n    this.onTagsChange = this.onTagsChange.bind(this);\r\n  }\r\n    \r\n  onTagsChange = (event, values) => {\r\n    values.map(async function(entry) {\r\n      entry.pic = await fetchIngredient(entry.title).then((res) => res);\r\n      return entry;\r\n    });\r\n    this.setState({\r\n      tags: values\r\n    });\r\n    const {tags} = this.state;\r\n    console.log(tags);\r\n  }\r\n    \r\n  render() {\r\n    return (\r\n      <div style={{ width: 1000 }}>\r\n        <Autocomplete\r\n          multiple\r\n          // id=\"tags-outlined\"\r\n          options={top100Films}\r\n          getOptionLabel={option => option.title.substring(4, option.title.length())}\r\n          // defaultValue={}\r\n          onChange={this.onTagsChange}\r\n          renderTags={(value, getTagProps) =>\r\n            value.map((option, index) => (\r\n              <Chip avatar={<Avatar alt=\"Remy Sharp\" src={option.pic} />} variant=\"outlined\" label={option.title.substring(4, option.title.length())} {...getTagProps({ index })} />\r\n            ))}\r\n          filterOptions={(options, params) => {\r\n            const filtered = filter(options, params);\r\n      \r\n            // Suggest the creation of a new value\r\n            if (params.inputValue !== '') {\r\n              filtered.push({\r\n                inputValue: params.inputValue,\r\n                title: `Add \"${params.inputValue}\"`,\r\n                pic: \"\"\r\n              });\r\n            }\r\n      \r\n            return filtered;\r\n          }}\r\n          renderInput={params => (\r\n            <TextField\r\n              {...params}\r\n              variant=\"outlined\"\r\n              label=\"Multiple values\"\r\n              placeholder=\"Favorites\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}   \r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n  { title: 'apple', year: 1994, pic: \"\" },\r\n  // { title: 'The Godfather', year: 1972 },\r\n  // { title: 'The Godfather: Part II', year: 1974 },\r\n  // { title: 'The Dark Knight', year: 2008 },\r\n  // { title: '12 Angry Men', year: 1957 },\r\n  // { title: \"Schindler's List\", year: 1993 },\r\n  // { title: 'Pulp Fiction', year: 1994 },\r\n  // { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n  // { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n  // { title: 'Fight Club', year: 1999 },\r\n  // { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n  // { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n  // { title: 'Forrest Gump', year: 1994 },\r\n  // { title: 'Inception', year: 2010 },\r\n  // { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n  // { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n  // { title: 'Goodfellas', year: 1990 },\r\n  // { title: 'The Matrix', year: 1999 },\r\n  // { title: 'Seven Samurai', year: 1954 },\r\n  // { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n  // { title: 'City of God', year: 2002 },\r\n  // { title: 'Se7en', year: 1995 },\r\n  // { title: 'The Silence of the Lambs', year: 1991 },\r\n  // { title: \"It's a Wonderful Life\", year: 1946 },\r\n  // { title: 'Life Is Beautiful', year: 1997 },\r\n  // { title: 'The Usual Suspects', year: 1995 },\r\n  // { title: 'Léon: The Professional', year: 1994 },\r\n  // { title: 'Spirited Away', year: 2001 },\r\n  // { title: 'Saving Private Ryan', year: 1998 },\r\n  // { title: 'Once Upon a Time in the West', year: 1968 },\r\n  // { title: 'American History X', year: 1998 },\r\n  // { title: 'Interstellar', year: 2014 },\r\n  // { title: 'Casablanca', year: 1942 },\r\n  // { title: 'City Lights', year: 1931 },\r\n  // { title: 'Psycho', year: 1960 },\r\n  // { title: 'The Green Mile', year: 1999 },\r\n  // { title: 'The Intouchables', year: 2011 },\r\n  // { title: 'Modern Times', year: 1936 },\r\n  // { title: 'Raiders of the Lost Ark', year: 1981 },\r\n  // { title: 'Rear Window', year: 1954 },\r\n  // { title: 'The Pianist', year: 2002 },\r\n  // { title: 'The Departed', year: 2006 },\r\n  // { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n  // { title: 'Back to the Future', year: 1985 },\r\n  // { title: 'Whiplash', year: 2014 },\r\n  // { title: 'Gladiator', year: 2000 },\r\n  // { title: 'Memento', year: 2000 },\r\n  // { title: 'The Prestige', year: 2006 },\r\n  // { title: 'The Lion King', year: 1994 },\r\n  // { title: 'Apocalypse Now', year: 1979 },\r\n  // { title: 'Alien', year: 1979 },\r\n  // { title: 'Sunset Boulevard', year: 1950 },\r\n  // {\r\n  //   title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n  //   year: 1964,\r\n  // },\r\n  // { title: 'The Great Dictator', year: 1940 },\r\n  // { title: 'Cinema Paradiso', year: 1988 },\r\n  // { title: 'The Lives of Others', year: 2006 },\r\n  // { title: 'Grave of the Fireflies', year: 1988 },\r\n  // { title: 'Paths of Glory', year: 1957 },\r\n  // { title: 'Django Unchained', year: 2012 },\r\n  // { title: 'The Shining', year: 1980 },\r\n  // { title: 'WALL·E', year: 2008 },\r\n  // { title: 'American Beauty', year: 1999 },\r\n  // { title: 'The Dark Knight Rises', year: 2012 },\r\n  // { title: 'Princess Mononoke', year: 1997 },\r\n  // { title: 'Aliens', year: 1986 },\r\n  // { title: 'Oldboy', year: 2003 },\r\n  // { title: 'Once Upon a Time in America', year: 1984 },\r\n  // { title: 'Witness for the Prosecution', year: 1957 },\r\n  // { title: 'Das Boot', year: 1981 },\r\n  // { title: 'Citizen Kane', year: 1941 },\r\n  // { title: 'North by Northwest', year: 1959 },\r\n  // { title: 'Vertigo', year: 1958 },\r\n  // { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n  // { title: 'Reservoir Dogs', year: 1992 },\r\n  // { title: 'Braveheart', year: 1995 },\r\n  // { title: 'M', year: 1931 },\r\n  // { title: 'Requiem for a Dream', year: 2000 },\r\n  // { title: 'Amélie', year: 2001 },\r\n  // { title: 'A Clockwork Orange', year: 1971 },\r\n  // { title: 'Like Stars on Earth', year: 2007 },\r\n  // { title: 'Taxi Driver', year: 1976 },\r\n  // { title: 'Lawrence of Arabia', year: 1962 },\r\n  // { title: 'Double Indemnity', year: 1944 },\r\n  // { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n  // { title: 'Amadeus', year: 1984 },\r\n  // { title: 'To Kill a Mockingbird', year: 1962 },\r\n  // { title: 'Toy Story 3', year: 2010 },\r\n  // { title: 'Logan', year: 2017 },\r\n  // { title: 'Full Metal Jacket', year: 1987 },\r\n  // { title: 'Dangal', year: 2016 },\r\n  // { title: 'The Sting', year: 1973 },\r\n  // { title: '2001: A Space Odyssey', year: 1968 },\r\n  // { title: \"Singin' in the Rain\", year: 1952 },\r\n  // { title: 'Toy Story', year: 1995 },\r\n  // { title: 'Bicycle Thieves', year: 1948 },\r\n  // { title: 'The Kid', year: 1921 },\r\n  // { title: 'Inglourious Basterds', year: 2009 },\r\n  // { title: 'Snatch', year: 2000 },\r\n  // { title: '3 Idiots', year: 2009 },\r\n  // { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}