{"ast":null,"code":"/**\r\n * Copyright 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactComponentWithPureRenderMixin\r\n */\nvar shallowEqual = require('shallowequal');\n\nfunction shallowCompare(instance, nextProps, nextState) {\n  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);\n}\n/**\r\n * If your React component's render function is \"pure\", e.g. it will render the\r\n * same result given the same props and state, provide this mixin for a\r\n * considerable performance boost.\r\n *\r\n * Most React components have pure render functions.\r\n *\r\n * Example:\r\n *\r\n *   var ReactComponentWithPureRenderMixin =\r\n *     require('ReactComponentWithPureRenderMixin');\r\n *   React.createClass({\r\n *     mixins: [ReactComponentWithPureRenderMixin],\r\n *\r\n *     render: function() {\r\n *       return <div className={this.props.className}>foo</div>;\r\n *     }\r\n *   });\r\n *\r\n * Note: This only checks shallow equality for props and state. If these contain\r\n * complex data structures this mixin may have false-negatives for deeper\r\n * differences. Only mixin to components which have simple props and state, or\r\n * use `forceUpdate()` when you know deep data structures have changed.\r\n *\r\n * See https://facebook.github.io/react/docs/pure-render-mixin.html\r\n */\n\n\nvar ReactComponentWithPureRenderMixin = {\n  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\n    return shallowCompare(this, nextProps, nextState);\n  }\n};\nmodule.exports = ReactComponentWithPureRenderMixin;","map":{"version":3,"sources":["C:/Users/lepan/Desktop/CIS550-Project/final project/client/node_modules/rc-util/es/PureRenderMixin.js"],"names":["shallowEqual","require","shallowCompare","instance","nextProps","nextState","props","state","ReactComponentWithPureRenderMixin","shouldComponentUpdate","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,SAA7C,EAAwD;AACtD,SAAO,CAACL,YAAY,CAACG,QAAQ,CAACG,KAAV,EAAiBF,SAAjB,CAAb,IAA4C,CAACJ,YAAY,CAACG,QAAQ,CAACI,KAAV,EAAiBF,SAAjB,CAAhE;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIG,iCAAiC,GAAG;AACtCC,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BL,SAA/B,EAA0CC,SAA1C,EAAqD;AAC1E,WAAOH,cAAc,CAAC,IAAD,EAAOE,SAAP,EAAkBC,SAAlB,CAArB;AACD;AAHqC,CAAxC;AAKAK,MAAM,CAACC,OAAP,GAAiBH,iCAAjB","sourcesContent":["/**\r\n * Copyright 2013-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule ReactComponentWithPureRenderMixin\r\n */\r\nvar shallowEqual = require('shallowequal');\r\n\r\nfunction shallowCompare(instance, nextProps, nextState) {\r\n  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);\r\n}\r\n/**\r\n * If your React component's render function is \"pure\", e.g. it will render the\r\n * same result given the same props and state, provide this mixin for a\r\n * considerable performance boost.\r\n *\r\n * Most React components have pure render functions.\r\n *\r\n * Example:\r\n *\r\n *   var ReactComponentWithPureRenderMixin =\r\n *     require('ReactComponentWithPureRenderMixin');\r\n *   React.createClass({\r\n *     mixins: [ReactComponentWithPureRenderMixin],\r\n *\r\n *     render: function() {\r\n *       return <div className={this.props.className}>foo</div>;\r\n *     }\r\n *   });\r\n *\r\n * Note: This only checks shallow equality for props and state. If these contain\r\n * complex data structures this mixin may have false-negatives for deeper\r\n * differences. Only mixin to components which have simple props and state, or\r\n * use `forceUpdate()` when you know deep data structures have changed.\r\n *\r\n * See https://facebook.github.io/react/docs/pure-render-mixin.html\r\n */\r\n\r\n\r\nvar ReactComponentWithPureRenderMixin = {\r\n  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {\r\n    return shallowCompare(this, nextProps, nextState);\r\n  }\r\n};\r\nmodule.exports = ReactComponentWithPureRenderMixin;"]},"metadata":{},"sourceType":"script"}